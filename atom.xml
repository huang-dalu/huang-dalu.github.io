<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UX Caff</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-07T12:15:50.161Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>huangdalu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>特征工程：主成分分析(PCA)的使用</title>
    <link href="http://example.com/2021/01/07/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90(PCA)%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/01/07/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90(PCA)%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-07T11:27:26.202Z</published>
    <updated>2021-01-07T12:15:50.161Z</updated>
    
    <content type="html"><![CDATA[<p>PCA 适用场景和流程说明。<a id="more"></a></p><p>PCA 是一种通过分解特征矩阵来降维的方法。主要适用的应用场景如下：</p><ul><li>非监督式类型的数据集。它是一种非监督式的降维方法，因此适用于不带有标签的数据集；而对于带有标签的数据集则可以采用 LDA；</li></ul><ul><li>根据方差自主控制特征数量。最大的主成分的数量≤特征的数量，这意味着，PCA也可以输出数量完全相同的特征，具体取决于选择特征中解释的方差比例；</li></ul><ul><li>数据量较大的数据集。数据量大包括数据记录多和数据维度多两种情况，PCA 对大型数据集的处理效率较高。</li></ul><p><strong>PCA 的实现流程</strong>：</p><ol><li>按照数据集的 n 维特征矩阵，输入原数据，结构维（m，n），找出原本 n 个特征向量构成的 n 维空间 V；</li><li>决定降维后的特征数量 k；</li><li>通过找一组相互正交的坐标轴，找出 n 个新的特征向量，以及他们构成的新 n 维空间 V；</li><li>找出原始数据在新特征空间 V 中的 n 个新特征向量上对应的值，即“将数据映射到新空间中”；</li><li>选取前 k 个信息量最大的特征，删掉没有被选中的特征，成功将 n 维空间降为 k 维。</li></ol><p>流程中的关键是需要决定降维的特征数量 k，以及找到一组相互正交的坐标轴。这里涉及的数理知识有部分细节我还不太清楚。数理推导建议可以看这部分<a href="https://www.matongxue.com/madocs/1025">如何理解主元分析（PCA）？</a></p><p>从方差过滤中知道，如果一个特征的方差很小，则意味着这个 特征上很可能有大量取值都相同(比如90%都是1，只有10%是0，甚至100%是1)，那这一个特征的取值对样本来说就没有区分度，这种特征就不带有有效信息。也就是说方差越大，特征上带有的信息量越大。因此，在降维中，PCA 使用的信息量衡量指标，就是样本方差。计算公式为：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1610011560782-c317ce1d-ca5c-444b-8a36-30d51e02ae2e.png#align=left&display=inline&height=122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=122&originWidth=462&size=7168&status=done&style=none&width=462" alt="image.png"><br>Var表示一个特征的方差，n 代表样本量，<img src="https://cdn.nlark.com/yuque/__latex/05e42209d67fe1eb15a055e9d3b3770e.svg#card=math&code=x_%7Bi%7D&height=14&width=15">代表一个特征中的每个样本取值，<img src="https://cdn.nlark.com/yuque/__latex/76c49f47074cdc0440dd6a64b10d1b78.svg#card=math&code=%5Cwidehat%7Bx%7D&height=16&width=10">代表这一列样本的均值。</p><h4 id="PCA-Python使用"><a href="#PCA-Python使用" class="headerlink" title="PCA Python使用"></a>PCA Python使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pca参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">decomposition</span>.<span class="title">PCA</span>(<span class="params">n_components=<span class="literal">None</span>, copy=<span class="literal">True</span>, whiten=<span class="literal">False</span>, svd_solver=<span class="string">&#x27;auto&#x27;</span>, tol=<span class="number">0.0</span>, iterated_power=<span class="string">&#x27;auto&#x27;</span>, random_state=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure><p>主要说下 n_components 参数。这个参数可以指定 PCA 降维后期望的特征维度数目。常规来说，要想先看看数据的散点图分布，可以 n_components=2，之前<a href="https://uxcaff.com/2021/01/06/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8%20PCA%20%E8%BF%9B%E8%A1%8C%E9%99%8D%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%8C%E4%BA%86%E8%A7%A3%E7%89%B9%E5%BE%81%E5%88%86%E5%B8%83/">《使用 PCA 降维可视化，了解数据特征分布》</a>有演示。</p><p>这里有 2 种方式，第 1 种是指定主成分的方差和所占的最小比例阈值，让 PCA 类根据样本特征方差来决定降维到的维度数，此时n_components 是一个（0，1]之间的数；并且让参数svd_solver ==’full’。比如说，如果我们希望保留 97% 的信息量，就可以输入n_components = 0.97，PCA会自动选出能够让保留的信息量超过97%的特征数量。第 2 种就是文章开始说的方差衡量指标pca_line.explained_variance_ratio_ ，用来查看降维后每个新特征向量所占信息量占原始数据总信息量的百分比。又叫做可解释方差贡献率。</p><p>代码演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入相关库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取skearn库鸢尾花数据集，鸢尾花四维数组</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">y = iris.target</span><br><span class="line">X = iris.data </span><br><span class="line">X[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[5.1, 3.5, 1.4, 0.2],</span><br><span class="line">       [4.9, 3. , 1.4, 0.2],</span><br><span class="line">       [4.7, 3.2, 1.3, 0.2],</span><br><span class="line">       [4.6, 3.1, 1.5, 0.2],</span><br><span class="line">       [5. , 3.6, 1.4, 0.2]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用PCA</span></span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>) </span><br><span class="line">pca = pca.fit(X)</span><br><span class="line">X_dr = pca.transform(X)</span><br><span class="line">X_dr[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[-2.68412563,  0.31939725],</span><br><span class="line">       [-2.71414169, -0.17700123],</span><br><span class="line">       [-2.88899057, -0.14494943],</span><br><span class="line">       [-2.74534286, -0.31829898],</span><br><span class="line">       [-2.72871654,  0.32675451]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">pca_line = PCA().fit(X) </span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],np.cumsum(pca_line.explained_variance_ratio_)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.xticks([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) </span><br><span class="line">plt.xlabel(<span class="string">&quot;降维后特征数量&quot;</span>) </span><br><span class="line">plt.ylabel(<span class="string">&quot;可解释方差贡献率&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1610018353258-8e73ad4b-17b5-4e7e-9811-cdf6a15df9e4.png#align=left&display=inline&height=261&margin=%5Bobject%20Object%5D&name=output_3_0.png&originHeight=261&originWidth=389&size=11685&status=done&style=none&width=389" alt="output_3_0.png"></p><p>累积可解释方差贡献率曲线是一条以降维后保留的特征个数为横坐标，降维后新特征矩阵捕捉到的可解释方差贡献 率为纵坐标的曲线。图中表示 4 个特征是 100%，2 个特征大概在 98%。                                                        </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保留97%信息量，PCA会自动选出能够让保留的信息量超过97%的特征数量。</span></span><br><span class="line">pca_f = PCA(n_components=<span class="number">0.97</span>,svd_solver=<span class="string">&quot;full&quot;</span>)</span><br><span class="line">pca_f = pca_f.fit(X)</span><br><span class="line">X_f = pca_f.transform(X)</span><br><span class="line">pca_f.explained_variance_ratio_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([0.92461872, 0.05306648])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;PCA 适用场景和流程说明。</summary>
    
    
    
    
    <category term="特征工程" scheme="http://example.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>NumPy：NumPy的cumsum()函数</title>
    <link href="http://example.com/2021/01/07/NumPy%EF%BC%9ANumPy%E7%9A%84cumsum()%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/01/07/NumPy%EF%BC%9ANumPy%E7%9A%84cumsum()%E5%87%BD%E6%95%B0/</id>
    <published>2021-01-07T05:19:01.099Z</published>
    <updated>2021-01-07T05:20:39.680Z</updated>
    
    <content type="html"><![CDATA[<p>numpy.cumsum(a, axis=None, dtype=None, out=None)介绍。<a id="more"></a></p><p>主要是axis，按照所给定的轴参数（axis）返回元素的梯形累计和，axis=0，按照列累加。axis=1，按照行累加。axis不给定具体值，就把numpy数组当成一个一维数组。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609996699881-ed5e97bb-4813-40ac-9ba3-df621d75fc7b.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=image.png&originHeight=159&originWidth=242&size=14523&status=done&style=none&width=242" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>,<span class="number">7</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[1, 2, 3],</span><br><span class="line">       [4, 5, 6]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认没有指定轴，所以输出会变成一维数组</span></span><br><span class="line"><span class="comment"># array([1，1+2=3，1+2+3=6，1+2+3+4=10，1+2+3+4+5=15，1+2+3+4+5+6=21]）</span></span><br><span class="line">np.cumsum(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ 1,  3,  6, 10, 15, 21])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [1,2,3]</span></span><br><span class="line"><span class="comment"># [1+4=5,2+5=7,3+6=9]</span></span><br><span class="line"><span class="comment"># 按照轴0进行累计求</span></span><br><span class="line">np.cumsum(a,axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[1, 2, 3],</span><br><span class="line">       [5, 7, 9]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照轴1进行累计求和</span></span><br><span class="line"><span class="comment"># [1,1+2=3,1+2+3=6]</span></span><br><span class="line"><span class="comment"># [4,4+5=9,4+5+6=15]</span></span><br><span class="line">np.cumsum(a,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[ 1,  3,  6],</span><br><span class="line">       [ 4,  9, 15]])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;numpy.cumsum(a, axis=None, dtype=None, out=None)介绍。</summary>
    
    
    
    
    <category term="NumPy" scheme="http://example.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>傅聪与纳兰性德《长相思》</title>
    <link href="http://example.com/2021/01/07/%E5%82%85%E8%81%AA%E4%B8%8E%E7%BA%B3%E5%85%B0%E6%80%A7%E5%BE%B7%E3%80%8A%E9%95%BF%E7%9B%B8%E6%80%9D%E3%80%8B/"/>
    <id>http://example.com/2021/01/07/%E5%82%85%E8%81%AA%E4%B8%8E%E7%BA%B3%E5%85%B0%E6%80%A7%E5%BE%B7%E3%80%8A%E9%95%BF%E7%9B%B8%E6%80%9D%E3%80%8B/</id>
    <published>2021-01-07T02:39:23.389Z</published>
    <updated>2021-01-07T03:22:33.406Z</updated>
    
    <content type="html"><![CDATA[<p>2020年12月28日，傅聪先生因感染新冠在英国逝世。<a id="more"></a></p><p>然后我接连看了追念先生的播客「<a href="https://www.xiaoyuzhoufm.com/episode/5ff2f7d0dee9c1e16d3713a2?s=eyJ1IjogIjVlZTBjNDRhZjNhYTNhY2U0YzYxMmY3OCJ9">当年离家的年轻人：傅聪与冷战时代的音乐家们</a>」和文章<a href="https://mp.weixin.qq.com/s?__biz=MjEwMzA5NTcyMQ==&mid=2653126923&idx=1&sn=1ab2273e6530b337ba73fe19a478fd1d&chksm=4eb267cd79c5eedb6cfcd65d878b019849c5343ce710edc0256941432f1cf346010e3b510921#rd">《傅聪：故园无此声》</a>。如此关注主要还是因为《傅雷家书》。不过，据说在傅聪面前再提《傅雷家书》，会让他感觉一丝恼怒。你不能在一位 80 岁德高望重智者前，老提他小时候被父亲残酷教育的事情。</p><p>感触良多。一是对于父亲傅雷自尽的解读，知父莫如子：</p><blockquote><p>我父亲一开始就是 martyr（烈士）的典型，这就是他的 karma（命运）。现在回想起来，很多中国知识分子对中国这传统有种特殊的感情。我父亲认为人有自己的选择，有最终的自由去选择死亡……他说过，人必死亡，而在死亡之前，人人平等。</p></blockquote><p>文章中也说：人们往往把傅雷的选择理解为不堪受辱、绝望自杀。但傅聪认为父亲的离去也是一种勇气。这条不归路是他一早就决定的，他并不是受辱自杀，因为他早已超越了「士可杀不可辱」的层次，他清楚预见了结局，「凛然踏上死亡之途」，「带着一种庄严肃穆的心，自己选择这条路」。</p><p>另外是这首《长相思》，傅雷对于傅聪是“故园无此声”，傅聪对于我们也是。</p><blockquote><p>山一程，水一程，身向榆关那畔行，夜深千帐灯。<br>风一更，雪一更，聒碎乡心梦不成，故园无此声。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2020年12月28日，傅聪先生因感染新冠在英国逝世。</summary>
    
    
    
    
    <category term="诗词" scheme="http://example.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>特征工程：使用 PCA 进行降维可视化，了解特征分布</title>
    <link href="http://example.com/2021/01/06/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8%20PCA%20%E8%BF%9B%E8%A1%8C%E9%99%8D%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%8C%E4%BA%86%E8%A7%A3%E7%89%B9%E5%BE%81%E5%88%86%E5%B8%83/"/>
    <id>http://example.com/2021/01/06/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8%20PCA%20%E8%BF%9B%E8%A1%8C%E9%99%8D%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%8C%E4%BA%86%E8%A7%A3%E7%89%B9%E5%BE%81%E5%88%86%E5%B8%83/</id>
    <published>2021-01-06T08:06:04.142Z</published>
    <updated>2021-01-07T12:06:12.729Z</updated>
    
    <content type="html"><![CDATA[<p>降维是数据挖掘流程中，一种对高维度特征数据预处理方法。<a id="more"></a>降维是将高维度的数据保留下最重要的一些特征，去除噪声和不重要的特征，从而实现提升数据处理速度的目的。在实际的生产和应用中，降维在一定的信息损失范围内，可以节省大量的时间成本。另外，除了让算法运行更快。降维还有一种场景，就是将数据可视化，根据数据分布情况进而选择合适算法。</p><p>降维算法主要有：主成分分析(PCA)、奇异值分解(SVD)、因子分析(FA)、独立成分分析(ICA)。本篇文章主要介绍利用 PCA 进行可视化。</p><p>在 sklearn 库，PCA 在 sklearn.decomposition.PCA 类：</p><blockquote><p>class sklearn.decomposition.PCA(n_components=None, copy=True, whiten=False, svd_solver=’auto’, tol=0.0, iterated_power=’auto’, random_state=None)</p></blockquote><p>如果只是对数据进行可视化，其他参数可以忽略，按照默认参数值即可，主要调整 n_components 参数。 n_components 是我们降维后需要的维度，即降维后需要保留的特征数量，降维流程中需要确认的 k 值， 一般输入[0, min(X.shape)]范围中的整数。这是一个需要我们人为设定的参数，数字设定会影响到模型表现。如果留下的特征太多，就达不到降维效果，如果留下特征太少，那新特征向量可能无法容纳原始数据集中的大部分信息。但是，在进行数据可视化观察数据分布时。因为数据往往都是二维状态，即 n_components 取值为 2。</p><h4 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入相关库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取skearn库鸢尾花数据集，鸢尾花四维数组</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">y = iris.target</span><br><span class="line">X = iris.data </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看原始数据</span></span><br><span class="line">X[<span class="number">0</span>:<span class="number">5</span>] </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[5.1, 3.5, 1.4, 0.2],</span><br><span class="line">       [4.9, 3. , 1.4, 0.2],</span><br><span class="line">       [4.7, 3.2, 1.3, 0.2],</span><br><span class="line">       [4.6, 3.1, 1.5, 0.2],</span><br><span class="line">       [5. , 3.6, 1.4, 0.2]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用PCA，n_components=2</span></span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>) </span><br><span class="line">pca = pca.fit(X)</span><br><span class="line">X_dr = pca.transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看降维后的数据</span></span><br><span class="line">X_dr[<span class="number">0</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[-2.68412563,  0.31939725],</span><br><span class="line">       [-2.71414169, -0.17700123],</span><br><span class="line">       [-2.88899057, -0.14494943],</span><br><span class="line">       [-2.74534286, -0.31829898],</span><br><span class="line">       [-2.72871654,  0.32675451]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#鸢尾花三种类型可视化</span></span><br><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>] </span><br><span class="line">iris.target_names</span><br><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">    plt.scatter(X_dr[y == i, <span class="number">0</span>] ,X_dr[y == i, <span class="number">1</span>]</span><br><span class="line">                ,alpha=<span class="number">.7</span></span><br><span class="line">                ,c=colors[i] ,label=iris.target_names[i]) </span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;PCA of IRIS dataset&#x27;</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1588755330550-23bbbb18-0273-4897-a062-70abb7d61e43.png#align=left&display=inline&height=264&margin=%5Bobject%20Object%5D&name=image.png&originHeight=264&originWidth=380&size=14582&status=done&style=none&width=380" alt="image.png"></p><p>如图，降维后进行可视化，可以清楚看到鸢尾花数据集 3 种类型分布，观察分布可以得知，鸢尾花数据集使用聚类算法，应该会取得比较好的效果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;降维是数据挖掘流程中，一种对高维度特征数据预处理方法。</summary>
    
    
    
    
    <category term="数据可视化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    <category term="特征工程" scheme="http://example.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>闻一多先生的书桌</title>
    <link href="http://example.com/2021/01/06/%E9%97%BB%E4%B8%80%E5%A4%9A%E5%85%88%E7%94%9F%E7%9A%84%E4%B9%A6%E6%A1%8C/"/>
    <id>http://example.com/2021/01/06/%E9%97%BB%E4%B8%80%E5%A4%9A%E5%85%88%E7%94%9F%E7%9A%84%E4%B9%A6%E6%A1%8C/</id>
    <published>2021-01-06T07:03:58.870Z</published>
    <updated>2021-01-06T07:06:03.448Z</updated>
    
    <content type="html"><![CDATA[<p>分享一首闻一多先生的诗词，“毛笔讲火柴烧秃了他的须”也笑弯了我的腰。<a id="more"></a>闻一多的书桌也是如此凌乱嘛。最后还可以理直气壮地“秩序不在我的能力之内”…太鲜活了…</p><p>忽然一切的静物都讲话了，<br>忽然间书桌上怨声腾沸：<br>墨盒呻吟道“我渴得要死！”<br>字典喊雨水渍湿了他的背；</p><p>信笺忙叫道弯痛了他的腰；<br>钢笔说烟灰闭塞了他的嘴，<br>毛笔讲火柴烧秃了他的须，<br>铅笔抱怨牙刷压了他的腿；</p><p>香炉咕喽着“这些野蛮的书<br>早晚定规要把你挤倒了！”<br>大钢表叹息快睡锈了骨头；<br>“风来了！风来了！”稿纸都叫了；</p><p>笔洗说他分明是盛水的，<br>怎么吃得惯臭辣的雪茄灰；<br>桌子怨一年洗不上两回澡，<br>墨水壶说“我两天给你洗一回。”</p><p>“什么主人？谁是我们的主人？”<br>一切的静物都同声骂道，<br>“生活若果是这般的狼狈，<br>倒还不如没有生活的好！”</p><p>主人咬着烟斗迷迷的笑，<br>“一切的众生应该各安其位。<br>我何曾有意的糟蹋你们，<br>秩序不在我的能力之内。”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;分享一首闻一多先生的诗词，“毛笔讲火柴烧秃了他的须”也笑弯了我的腰。</summary>
    
    
    
    
    <category term="诗词" scheme="http://example.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>NumPy：NumPy中dot()函数</title>
    <link href="http://example.com/2021/01/05/NumPy%EF%BC%9ANumPy%E4%B8%ADdot()%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/01/05/NumPy%EF%BC%9ANumPy%E4%B8%ADdot()%E5%87%BD%E6%95%B0/</id>
    <published>2021-01-05T05:59:23.845Z</published>
    <updated>2021-01-05T06:03:07.300Z</updated>
    
    <content type="html"><![CDATA[<p>dot()函数处理一维数组、二维数组的计算方式。<a id="more"></a></p><p><strong>处理一维数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">5</span>)</span><br><span class="line">b = np.arange(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">c = np.arange(<span class="number">10</span>,<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">print(a, <span class="string">&quot;# a&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(b, <span class="string">&quot;# b&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(c, <span class="string">&quot;# c&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(np.dot(a, b))</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(np.dot(a, c))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[0 1 2 3 4] # a</span><br><span class="line">------------------------------</span><br><span class="line">[5 6 7 8 9] # b</span><br><span class="line">------------------------------</span><br><span class="line">[10 11 12 13] # c</span><br><span class="line">------------------------------</span><br><span class="line">80</span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line"></span><br><span class="line">&lt;ipython-input-58-f134be7edf61&gt; in &lt;module&gt;</span><br><span class="line">     15 print(&#39;-&#39;*30)</span><br><span class="line">     16 </span><br><span class="line">---&gt; 17 print(np.dot(a, c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;__array_function__ internals&gt; in dot(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ValueError: shapes (5,) and (4,) not aligned: 5 (dim 0) !&#x3D; 4 (dim 0)</span><br></pre></td></tr></table></figure><ul><li>两个向量必须同维度，否则会报错；</li><li>计算过程：$$0<em>5+1</em>6+2<em>7+3</em>8+4*9 = 80$$</li><li>向量的内积公示：$$a=(x_{1},y_{1}),b=(x_{2},y_{2})$$，内积表示为：$$a*b = x_{1}x_{2}+y_{1}x_{2}$$</li></ul><p><strong>处理二维数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.matrix([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">print(x, <span class="string">&quot;# x&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">y = np.matrix(<span class="string">&quot;5,6;7,8&quot;</span>)</span><br><span class="line">print(y, <span class="string">&quot;# y&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(np.dot(x, y))</span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(np.dot(y, x))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[1 2]</span><br><span class="line"> [3 4]] # x</span><br><span class="line">------------------------------</span><br><span class="line">[[5 6]</span><br><span class="line"> [7 8]] # y</span><br><span class="line">------------------------------</span><br><span class="line">[[19 22]</span><br><span class="line"> [43 50]]</span><br><span class="line">------------------------------</span><br><span class="line">[[23 34]</span><br><span class="line"> [31 46]]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609825913173-55688113-3a7f-4473-b468-e3594d7bde2f.png#align=left&display=inline&height=410&margin=%5Bobject%20Object%5D&name=image.png&originHeight=410&originWidth=371&size=16191&status=done&style=none&width=371" alt="image.png"><br>矩阵积计算不遵循交换律，np.dot(a,b) 和 np.dot(b,a) 得到的结果是不一样。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;dot()函数处理一维数组、二维数组的计算方式。</summary>
    
    
    
    
    <category term="NumPy" scheme="http://example.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>回望2020年</title>
    <link href="http://example.com/2021/01/04/%E5%9B%9E%E6%9C%9B2020%E5%B9%B4/"/>
    <id>http://example.com/2021/01/04/%E5%9B%9E%E6%9C%9B2020%E5%B9%B4/</id>
    <published>2021-01-04T03:07:12.220Z</published>
    <updated>2021-01-05T06:12:07.130Z</updated>
    
    <content type="html"><![CDATA[<p>回望 2020 年。<a id="more"></a></p><p>从何时开始兴起的年终总结，本来挺私人的内容，各个 App 却把它用作营销传播手段。印象里最早传播有效果的应该是网易云音乐、支付宝、微信（做过 1 次好像）。然后最近两年各类应用开始驾轻就熟。外卖、播客、打车、购物…</p><p>有趣的是，不知道外卖业务的同学在做的时候有没有想过，当用户看到一年吃了 xx 次外卖的时候，是怎样一种心情，对业务是否有影响？</p><p>回到我的总结，这一年的主题是：蛰伏。这也是无论发生什么，今年提醒自己最多的词。</p><p>2020 年的魔幻，会载入历史。</p><p>疫情。湖北老家属于重灾区，今年自己也经历了隔离。也是第 1 年没有和家人一起过年，自己独自在杭州。最深的感触是，自己的工作内容，能帮忙做些什么。好像真的很无力。这种无力感加剧了我正视自己工作的价值。加速了一些决策。在 1 - 3 月，除了留一些固定时间关注疫情，做一些力所能及的事，全部精力花在 2021 年目标上。现在回过头来看，所幸自己能坚持下来。</p><p>国际关系。今年非常密切地、通过各种渠道在关注国际关系。兼听则明。中国、美国、香港的关系复杂纷繁。明白国家并不是会一直向前；宏观下的一个决策，个体应该如何应对；个人的乡土情怀、以及作为世界公民的权利义务。</p><p>对于个人，今年疯狂输出（相对往年的平淡）。并且开始整理个人知识体系，规整信息输入渠道。建立起 PKM。在认知、视野上，受益匪浅。</p><p>机器学习、Python 的持续学习。今年有了一些成果，期望在明年能再进一步。</p><p>2021 年，应该会有很大变化。工作、能力、生活都会不同。</p><p>摩拳擦掌，继续准备。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;回望 2020 年。</summary>
    
    
    
    
    <category term="Life" scheme="http://example.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>案例：使用K-Means对用户进行分群</title>
    <link href="http://example.com/2021/01/03/%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%BF%E7%94%A8K-Means%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BE%A4/"/>
    <id>http://example.com/2021/01/03/%E6%A1%88%E4%BE%8B%EF%BC%9A%E4%BD%BF%E7%94%A8K-Means%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BE%A4/</id>
    <published>2021-01-03T09:56:57.988Z</published>
    <updated>2021-01-03T10:08:52.414Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要通过一个案例，来演示K-Means的用法。<a id="more"></a></p><h2 id="K-Means定义"><a href="#K-Means定义" class="headerlink" title="K-Means定义"></a>K-Means定义</h2><p>K-Means 算法是聚类算法的一种，所以先了解聚类算法。</p><p>聚类分析是在没有给定划分类别情况下，根据数据相似度进行样本分组的一种方法。是一种无监督的学习算法。划分依据主要是自身的距离或相似度将他们划分为若干组，划分原则是组内样本最小化而组间（外部）距离最大化。聚类多数场景下用在「数据探索」环节，也就是用来了解数据。它无法提供明确的行动指向，更多是为后期挖掘和分析提供参考，无法回答“为什么”和“怎么办”的问题。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609659951674-70225e26-52a2-43b6-8d45-42f4831a13ef.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&name=image.png&originHeight=340&originWidth=604&size=76903&status=done&style=none&width=302" alt="image.png"></p><p>聚类分析和分类区别：分类是从特定的数据中挖掘模式，作出分类判断；聚类是根据数据本身特点，按照不同的模型来判断数据之间的相似性、相似性高的一组数据聚成一簇。</p><p>K-Means 算法是基于距离的聚类方法，在最小误差函数的基础上将数据划分为预定的类数 K，采用距离作为相似性的评价指标，认为两个对象的距离越近，其相似度越高。适用于连续型数据。使用场景可以是：用户分群分析。</p><p><strong>算法过程</strong></p><ol><li>从 n 个样本数据中随机选取 K 个对象作为初始的聚类中心（在一开始确定 K 值上，凭业务经验划分，所以K值的选定不一定合理）；</li><li>分别计算每个样本到各个聚类中心的距离，将对象分配到距离最近的聚类中；</li><li>所有对象分配完成后，重新计算 K 个聚类的中心（类似重新计算虚拟中心）；</li><li>与前一次计算得到的 K 个聚类中心比较，如果聚类中心发生变化，转至步骤 2，否则转至步骤 5；</li><li>当质心不发生变化时，停止并输出聚类结果；</li><li>度量距离：度量样本之间的相似性最常用的是欧几里得距离、曼哈顿距离和闵可夫斯基距离（Python 中目前支持欧氏距离）。</li></ol><p><strong>伪代码如图所示</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609660150949-6815cd42-d6c5-4416-ba91-6f4216872145.png#align=left&display=inline&height=419&margin=%5Bobject%20Object%5D&name=image.png&originHeight=838&originWidth=1222&size=296416&status=done&style=none&width=611" alt="image.png"></p><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p><em>注：以下案例数据集来源于《Python数据分析与挖掘实战（第2版）》，但是整体分析流程有调整。可以互相查阅学习。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>] </span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># sns.set_style(&quot;darkgrid&quot;,&#123;&quot;font.sans-serif&quot;:[&#x27;simhei&#x27;,&#x27;Droid Sans Fallback&#x27;]&#125;)</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;air_data.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609660644766-82bb23ff-4050-4aed-9058-32cd2dd70a71.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&name=image.png&originHeight=340&originWidth=1994&size=77310&status=done&style=none&width=997" alt="image.png"><br>部分数据字段</p><h3 id="描述性统计分析"><a href="#描述性统计分析" class="headerlink" title="描述性统计分析"></a>描述性统计分析</h3><h4 id="查看整体数据描述性分析"><a href="#查看整体数据描述性分析" class="headerlink" title="查看整体数据描述性分析"></a>查看整体数据描述性分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explore = df.describe(percentiles=[], include=<span class="string">&#x27;all&#x27;</span>).T</span><br><span class="line">explore</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609661223161-19fa1a93-4625-4a9b-9d29-235554837da5.png#align=left&display=inline&height=602&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1204&originWidth=1326&size=197420&status=done&style=none&width=663" alt="image.png"><br>部分数据字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explore[<span class="string">&#x27;null&#x27;</span>] = <span class="built_in">len</span>(df) - explore[<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line">df_check = explore[[<span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>]]</span><br><span class="line">df_check.columns = [[<span class="string">&#x27;空值记录数&#x27;</span>, <span class="string">&#x27;最大值&#x27;</span>, <span class="string">&#x27;最小值&#x27;</span>]]</span><br><span class="line">df_check</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609661301809-df8b9384-93d1-4354-ac93-4284040720e0.png#align=left&display=inline&height=564&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1128&originWidth=688&size=96763&status=done&style=none&width=344" alt="image.png"><br>部分数据字段</p><h4 id="查看单个主体变量会员逐年增长情况"><a href="#查看单个主体变量会员逐年增长情况" class="headerlink" title="查看单个主体变量会员逐年增长情况"></a>查看单个主体变量会员逐年增长情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;FFP_DATE_year&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;FFP_DATE&#x27;</span>]).dt.year</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个年份的合计数量。方式一</span></span><br><span class="line">count = df[<span class="string">&#x27;FFP_DATE_year&#x27;</span>].value_counts(sort=<span class="literal">False</span>).reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个年份的合计数量。方式二</span></span><br><span class="line"><span class="comment"># count = df.groupby(&#x27;FFP_DATE&#x27;)[&#x27;FFP_DATE&#x27;].count()</span></span><br><span class="line"></span><br><span class="line">count.columns = [<span class="string">&#x27;入会时间&#x27;</span>, <span class="string">&#x27;入会人数&#x27;</span>]</span><br><span class="line">count.plot(kind=<span class="string">&#x27;bar&#x27;</span>, x=<span class="string">&#x27;入会时间&#x27;</span>, y=<span class="string">&#x27;入会人数&#x27;</span>, figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609661365172-ec92e7b0-3903-484a-9113-4e067c2512b0.png#align=left&display=inline&height=369&margin=%5Bobject%20Object%5D&name=output_8_1.png&originHeight=492&originWidth=719&size=9707&status=done&style=none&width=539" alt="output_8_1.png"></p><h4 id="查看单个分类型变量比例变化情况（直方堆积图）"><a href="#查看单个分类型变量比例变化情况（直方堆积图）" class="headerlink" title="查看单个分类型变量比例变化情况（直方堆积图）"></a>查看单个分类型变量比例变化情况（直方堆积图）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用数据交叉表，计算每个年度时间节点，出现男女分类的数量情况</span></span><br><span class="line">cross_table = pd.crosstab(index=df[<span class="string">&#x27;FFP_DATE_year&#x27;</span>],columns=df[<span class="string">&#x27;GENDER&#x27;</span>])</span><br><span class="line">cross_table</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663099981-b568a5b0-16b2-4784-bb73-0d257337dad4.png#align=left&display=inline&height=320&margin=%5Bobject%20Object%5D&name=image.png&originHeight=640&originWidth=384&size=40027&status=done&style=none&width=192" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过div函数，让分组每行合计等于1，用来看每个分组占比</span></span><br><span class="line">cross_table = cross_table.div(cross_table.<span class="built_in">sum</span>(<span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line">cross_table</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663126719-d9b274e0-4ef7-48c0-a775-5643d0f5a1b9.png#align=left&display=inline&height=324&margin=%5Bobject%20Object%5D&name=image.png&originHeight=648&originWidth=466&size=53806&status=done&style=none&width=233" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cross_table.plot(kind=<span class="string">&#x27;bar&#x27;</span>, stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609661406389-87534c6b-7221-4eae-b0b6-1076bce88eec.png#align=left&display=inline&height=274&margin=%5Bobject%20Object%5D&name=output_12_1.png&originHeight=274&originWidth=370&size=6785&status=done&style=none&width=370" alt="output_12_1.png"></p><h4 id="查看单个分类型变量占比情况（直方图-amp-饼图）"><a href="#查看单个分类型变量占比情况（直方图-amp-饼图）" class="headerlink" title="查看单个分类型变量占比情况（直方图&amp;饼图）"></a>查看单个分类型变量占比情况（直方图&amp;饼图）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 男女分别数量合计占比</span></span><br><span class="line">sns.countplot(x=<span class="string">&#x27;GENDER&#x27;</span>,data=df)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663209770-658345ad-aeb2-49cf-b5eb-6f296a014350.png#align=left&display=inline&height=262&margin=%5Bobject%20Object%5D&name=output_14_1.png&originHeight=262&originWidth=397&size=4806&status=done&style=none&width=397" alt="output_14_1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 男女会员分别所有数量。方式一</span></span><br><span class="line"><span class="comment"># male_count = df.groupby(&#x27;GENDER&#x27;)[&#x27;GENDER&#x27;].count()[0]</span></span><br><span class="line"><span class="comment"># female_count = df.groupby(&#x27;GENDER&#x27;)[&#x27;GENDER&#x27;].count()[1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">male_count = pd.value_counts(df[<span class="string">&#x27;GENDER&#x27;</span>])[<span class="string">&#x27;男&#x27;</span>]</span><br><span class="line">female_count = pd.value_counts(df[<span class="string">&#x27;GENDER&#x27;</span>])[<span class="string">&#x27;女&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.pie([male_count, female_count], </span><br><span class="line">        labels=[<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>], </span><br><span class="line">        colors=[<span class="string">&#x27;lightskyblue&#x27;</span>, <span class="string">&#x27;lightcoral&#x27;</span>],</span><br><span class="line">        autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>,</span><br><span class="line">       )</span><br><span class="line">plt.show</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663251250-cb9db598-ddeb-4c07-8ad5-3e306287b905.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&name=output_15_1.png&originHeight=231&originWidth=231&size=6109&status=done&style=none&width=231" alt="output_15_1.png"></p><h4 id="查看单个分类型变量频数情况（直方图）"><a href="#查看单个分类型变量频数情况（直方图）" class="headerlink" title="查看单个分类型变量频数情况（直方图）"></a>查看单个分类型变量频数情况（直方图）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一： 直接使用sns.countplot 查看单个变量的分类情况</span></span><br><span class="line"><span class="comment"># sns.countplot(x=&#x27;FFP_TIER&#x27;,data=df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：</span></span><br><span class="line">FFP_TIER_Level4 = pd.value_counts(df[<span class="string">&#x27;FFP_TIER&#x27;</span>])[<span class="number">4</span>]</span><br><span class="line">FFP_TIER_Level5 = pd.value_counts(df[<span class="string">&#x27;FFP_TIER&#x27;</span>])[<span class="number">5</span>]</span><br><span class="line">FFP_TIER_Level6 = pd.value_counts(df[<span class="string">&#x27;FFP_TIER&#x27;</span>])[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">plt.bar(x=<span class="built_in">range</span>(<span class="number">3</span>), </span><br><span class="line">        height=[FFP_TIER_Level4, FFP_TIER_Level5, FFP_TIER_Level6],</span><br><span class="line">        width=<span class="number">0.4</span>,</span><br><span class="line">        alpha=<span class="number">0.8</span>,</span><br><span class="line">        color=<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">plt.xticks([index <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663278899-bcc8c0f9-4b9a-4a55-96ea-2df8a35aa71d.png#align=left&display=inline&height=247&margin=%5Bobject%20Object%5D&name=output_17_0.png&originHeight=247&originWidth=384&size=4299&status=done&style=none&width=384" alt="output_17_0.png"></p><h4 id="查看单个数值型变量分布情况（箱型图）"><a href="#查看单个数值型变量分布情况（箱型图）" class="headerlink" title="查看单个数值型变量分布情况（箱型图）"></a>查看单个数值型变量分布情况（箱型图）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会员年龄分布箱型图</span></span><br><span class="line"></span><br><span class="line">plt.figaspect</span><br><span class="line">plt.boxplot(df[<span class="string">&#x27;AGE&#x27;</span>].dropna(),</span><br><span class="line">           patch_artist=<span class="literal">True</span>,</span><br><span class="line">           vert=<span class="literal">False</span>,</span><br><span class="line">           boxprops = &#123;<span class="string">&#x27;facecolor&#x27;</span>: <span class="string">&#x27;lightblue&#x27;</span>&#125;,</span><br><span class="line">           labels=[<span class="string">&#x27;会员年龄&#x27;</span>])</span><br><span class="line">plt.grid(linestyle=<span class="string">&quot;:&quot;</span>, color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;会员年龄分布箱型图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663303954-49193676-ac2f-49c5-ba15-c7ddf298741d.png#align=left&display=inline&height=263&margin=%5Bobject%20Object%5D&name=output_19_0.png&originHeight=263&originWidth=396&size=8550&status=done&style=none&width=396" alt="output_19_0.png"></p><h3 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#x27;FFP_TIER&#x27;,&#x27;FLIGHT_COUNT&#x27;,&#x27;LAST_TO_END&#x27;,&#x27;SEG_KM_SUM&#x27;,&#x27;EXCHANGE_COUNT&#x27;,&#x27;Points_Sum&#x27;,&#x27;FFP_DATE&#x27;的相关系数分析</span></span><br><span class="line">df_corr = df.loc[:, [<span class="string">&#x27;FFP_TIER&#x27;</span>,<span class="string">&#x27;FLIGHT_COUNT&#x27;</span>,<span class="string">&#x27;LAST_TO_END&#x27;</span>,<span class="string">&#x27;SEG_KM_SUM&#x27;</span>,<span class="string">&#x27;EXCHANGE_COUNT&#x27;</span>,<span class="string">&#x27;Points_Sum&#x27;</span>,<span class="string">&#x27;FFP_DATE&#x27;</span>]]</span><br><span class="line">age1 = df[<span class="string">&#x27;AGE&#x27;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">df_corr[<span class="string">&#x27;AGE&#x27;</span>] = age1.astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df的相关系数</span></span><br><span class="line">df_corr = df_corr.corr()</span><br><span class="line">df_corr</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663343456-3ef0fbda-f30e-416e-a754-882395249549.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=1558&size=87945&status=done&style=none&width=779" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.subplots(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征数据热力图</span></span><br><span class="line">ax = sns.heatmap(df_corr, annot=<span class="literal">True</span>, cmap=<span class="string">&#x27;Blues&#x27;</span>)</span><br><span class="line">ax.set_ylim([<span class="number">8</span>, <span class="number">0</span>])</span><br><span class="line">ax</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663476591-02ec9a92-5ca3-4717-a2ca-4f393e27abd3.png#align=left&display=inline&height=664&margin=%5Bobject%20Object%5D&name=output_22_1.png&originHeight=664&originWidth=646&size=34967&status=done&style=none&width=646" alt="output_22_1.png"></p><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><h4 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除票价为空的行　</span></span><br><span class="line">airline_notnull = df.loc[df[<span class="string">&#x27;SUM_YR_1&#x27;</span>].notnull() &amp; df[<span class="string">&#x27;SUM_YR_2&#x27;</span>].notnull(), :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留票价非零数据，或者平均折扣率不为零且总飞行数大于0的记录；AGE去除大于100的记录</span></span><br><span class="line">index1 = airline_notnull[<span class="string">&#x27;SUM_YR_1&#x27;</span>] != <span class="number">0</span></span><br><span class="line">index2 = airline_notnull[<span class="string">&#x27;SUM_YR_2&#x27;</span>] != <span class="number">0</span></span><br><span class="line">index3 = (airline_notnull[<span class="string">&#x27;SEG_KM_SUM&#x27;</span>] &gt; <span class="number">0</span>) &amp; (airline_notnull[<span class="string">&#x27;avg_discount&#x27;</span>] != <span class="number">0</span>)</span><br><span class="line">index4 = airline_notnull[<span class="string">&#x27;AGE&#x27;</span>] &gt; <span class="number">100</span></span><br><span class="line">airline = airline_notnull[(index1 | index2) &amp; index3 &amp; ~index4]</span><br><span class="line">airline.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663521750-c16a7577-0629-45b0-8209-cb4e3571d02b.png#align=left&display=inline&height=174&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=1984&size=77337&status=done&style=none&width=992" alt="image.png"><br>部分数据字段</p><h4 id="属性归约"><a href="#属性归约" class="headerlink" title="属性归约"></a>属性归约</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">airline = airline[[<span class="string">&#x27;FFP_DATE&#x27;</span>, <span class="string">&#x27;LOAD_TIME&#x27;</span>, <span class="string">&#x27;LAST_TO_END&#x27;</span>,<span class="string">&#x27;FLIGHT_COUNT&#x27;</span>,<span class="string">&#x27;SEG_KM_SUM&#x27;</span>,<span class="string">&#x27;avg_discount&#x27;</span> ]]</span><br><span class="line">airline[<span class="string">&#x27;FFP_DATE&#x27;</span>], airline[<span class="string">&#x27;LOAD_TIME&#x27;</span>] = pd.to_datetime(airline[<span class="string">&#x27;FFP_DATE&#x27;</span>]), pd.to_datetime(airline[<span class="string">&#x27;LOAD_TIME&#x27;</span>])</span><br><span class="line">airline[<span class="string">&#x27;L&#x27;</span>] = (airline[<span class="string">&#x27;LOAD_TIME&#x27;</span>] - airline[<span class="string">&#x27;FFP_DATE&#x27;</span>]).dt.days</span><br><span class="line">airline = airline.drop([<span class="string">&#x27;FFP_DATE&#x27;</span>, <span class="string">&#x27;LOAD_TIME&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">airline.columns = [<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;L&#x27;</span>]</span><br><span class="line">airline.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663568332-70ae8162-8bf1-46ab-87fe-2d21a365d463.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=image.png&originHeight=318&originWidth=474&size=28174&status=done&style=none&width=237" alt="image.png"></p><h4 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">data = StandardScaler().fit_transform(airline)</span><br><span class="line">data[:<span class="number">5</span>, :]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[-0.94493902, 14.03402401, 26.76115699,  1.29554188,  1.43579256],</span><br><span class="line">       [-0.91188564,  9.07321595, 13.12686436,  2.86817777,  1.30723219],</span><br><span class="line">       [-0.88985006,  8.71887252, 12.65348144,  2.88095186,  1.32846234],</span><br><span class="line">       [-0.41608504,  0.78157962, 12.54062193,  1.99471546,  0.65853304],</span><br><span class="line">       [-0.92290343,  9.92364019, 13.89873597,  1.34433641,  0.3860794 ]])</span><br></pre></td></tr></table></figure><h3 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型,随机种子设为123</span></span><br><span class="line">kmeans_model = KMeans(n_clusters=<span class="number">5</span>, n_jobs=<span class="number">4</span>, random_state=<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">fit_kmeans = kmeans_model.fit(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看聚类结果</span></span><br><span class="line">kmeans_cc = kmeans_model.cluster_centers_</span><br><span class="line">kmeans_cc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本的类别标签</span></span><br><span class="line">kmeans_lable = kmeans_model.labels_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计不同类别样本数目</span></span><br><span class="line">pd.Series(kmeans_model.labels_).value_counts()</span><br><span class="line"></span><br><span class="line">cluster_center = pd.DataFrame(kmeans_model.cluster_centers_, columns=[<span class="string">&#x27;ZR&#x27;</span>,<span class="string">&#x27;ZF&#x27;</span>,<span class="string">&#x27;ZM&#x27;</span>,<span class="string">&#x27;ZC&#x27;</span>,<span class="string">&#x27;ZL&#x27;</span>])</span><br><span class="line"><span class="comment"># cluster_center.index = pd.DataFrame(kmeans_model.labels_).drop_duplicates().iloc[:,0]</span></span><br><span class="line">cluster_center</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663621550-c9bfed73-777d-44c0-8ea1-62bda468d0d0.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=718&size=37057&status=done&style=none&width=359" alt="image.png"></p><h4 id="聚类分析可视化（雷达图）"><a href="#聚类分析可视化（雷达图）" class="headerlink" title="聚类分析可视化（雷达图）"></a>聚类分析可视化（雷达图）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标签</span></span><br><span class="line">labels = cluster_center.columns </span><br><span class="line"></span><br><span class="line"><span class="comment">#数据个数</span></span><br><span class="line">k = <span class="number">5</span> </span><br><span class="line">plot_data = kmeans_model.cluster_centers_</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定颜色</span></span><br><span class="line">color = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;y&#x27;</span>] </span><br><span class="line"></span><br><span class="line">angles = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, k, endpoint=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭合</span></span><br><span class="line">plot_data = np.concatenate((plot_data, plot_data[:,[<span class="number">0</span>]]), axis=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭合</span></span><br><span class="line">angles = np.concatenate((angles, [angles[<span class="number">0</span>]])) </span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#polar参数</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, polar=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plot_data)):</span><br><span class="line">  ax.plot(angles, plot_data[i], <span class="string">&#x27;o-&#x27;</span>, color = color[i], label = <span class="string">u&#x27;客户群&#x27;</span>+<span class="built_in">str</span>(i), linewidth=<span class="number">2</span>)<span class="comment"># 画线</span></span><br><span class="line"></span><br><span class="line">ax.set_rgrids(np.arange(<span class="number">0.01</span>, <span class="number">3.5</span>, <span class="number">0.5</span>), np.arange(-<span class="number">1</span>, <span class="number">2.5</span>, <span class="number">0.5</span>), fontproperties=<span class="string">&quot;SimHei&quot;</span>)</span><br><span class="line">ax.set_thetagrids(angles * <span class="number">180</span>/np.pi, labels, fontproperties=<span class="string">&quot;SimHei&quot;</span>)</span><br><span class="line">plt.legend(loc = <span class="number">4</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/613759/1609663646263-b9932bdd-996e-4b21-b064-cbc4d05a57bb.png#align=left&display=inline&height=271&margin=%5Bobject%20Object%5D&name=output_32_1.png&originHeight=361&originWidth=361&size=62814&status=done&style=none&width=271" alt="output_32_1.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇主要通过一个案例，来演示K-Means的用法。</summary>
    
    
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《如何高效学习》读书笔记</title>
    <link href="http://example.com/2021/01/03/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/01/03/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-03T05:40:25.827Z</published>
    <updated>2021-01-03T05:42:57.411Z</updated>
    
    <content type="html"><![CDATA[<p>整体性学习是一种学习理论，它更精确、全面地描述了我们大脑是如何工作的。<a id="more"></a></p><p>整体性学习基于 3 种主要的观点：结构、模型、高速公路。</p><p><strong>结构</strong></p><p>结构就是一系列紧密联系的知识。假如你打算学习 C++ 语言编程，你可能已经有了 C++ 语言的知识结构，这个知识结构包含你所知道的所有 C++ 语言知识，是有关 C++ 语言各种知识及其联系的总和。</p><p>简而言之就是围绕一个主体或者一个命题，需要解释和论证的范围。拿出版业举例：</p><blockquote><p>出版业入门<br>什么是出版？<br>什么是做书？<br>什么是编辑？<br>基础/进阶编辑课<br>编审校基本流程认知<br>编审工具书认知<br>审读和改稿原则<br>编辑效率工具<br>出版专业职业资格考试<br>关于纸张的了解<br>关于印制流程常识<br>图书成本核算<br>引进书的选题策划<br>引进书的本土化策略<br>引进书的翻译<br>一个选题的诞生：原创书选题策划的基本步骤<br>编辑在原创书选题策划中的重要作用<br>3 个原创书选题设计要思考的核心方向版权编辑基础<br>著作权ABC<br>版本保护和纠纷<br>版权引进和输出<br>书展的常识<br>版权合同<br>版权项目管理</p></blockquote><p><strong>模型</strong></p><p>假如说结构是整体性学习的门户，那么模型就是开门的钥匙，模型是简化的结构，它是结构的快照，更为简单和更易储存。</p><p>模型有很多种形式，但是目标总是同样的：那就是压缩信息。通过将一些核心概念联系在一起，就可以创建一个模型。模型对于你开始构建一个结构或是在当前结构上添加内容非常重要。</p><blockquote><p>关于出版业的介绍<br>关于图书编辑的介绍<br>图书编辑的分类和日常任务<br>关于纸张和印制流程的了解<br>关于图书版权的介绍</p></blockquote><p><strong>高速公路</strong></p><p>结构里有很多路将建筑连接在一起，拥有数百条城市内部的公路当然很有用，但是光有内部的路并不足以发挥具有整体性大脑的真实力量。因此，你需要增加的是城市之间的高速公路，即结构与结构之间的联系。</p><p>高速公路作为参照物可以连接两个完全不同的观念。假如你正在阅读生物学课本，又与学过的商业发展史课程相比较、相联系，这就建立了高速公路。</p><p>建立“高速公路”的原因，是因为现实生活中的问题，很多需要跨多个知识点来解决。高速公路能激发创造力。“跳出盒子”之外思考最恰当地描述了那些在结构之外思考的人们。高速公路让他们以前所未有的方式思考，以不曾想过的方式将常人眼里风马牛不相及的专业联系在一起思考，这就是创造。利用高速公路可以在专业交叉的领域建立起新的结构。</p><p>以上简单概括了整体性学习的概念以及 3 种主要的观点，下面介绍整体性学习的顺序</p><ol><li>获取：获取就是信息进入你的眼睛和耳朵，阅读、课堂上记笔记以及个人的种种经历都是获取。获取阶段的目标是获取的信息要准确，信息量要尽量压缩。</li><li>理解：理解就是了解信息的基本意思，并放在上下文中联系，这是学习的最基本联系。</li><li>拓展：拓展阶段是整体性学习中最花力气的地方，这一步将形成模型、高速公路和广泛的联系，从而获得良好的结构。</li><li>纠错：纠错阶段是在模型和高速公路中寻找错误，这个阶段要删除那些无效的联系。</li><li>应用：上述阶段的每一步都需要测试，测试有助于你迅速找到学习中的问题所在，帮助你改进学习技术，克服缺点。</li></ol><p>还有一个测试步骤是伴随上述每一步的。测试就是观察以上五个步骤做得好不好，严格的测试能发现问题出在哪里。</p><p>在按照整体性学习的顺序中，对于「获取信息」，有 3 个目标：简化、容量、速度。总之就是快速的汲取与结构相关的内容。关于「理解」，这其实和每个人的阅历、知识结构、性格都有关系，不是一蹴而就就能得到最优解。</p><p>主要我们说说「拓展」。拓展才是整体性学习的真正开始。之前对信息的字面意思已经有了一个基本的理解，现在可以将这个信息与其他信息联系起来了，在这个阶段要应用模型来简化和扩展结构，同时也要拓展对信息的理解，包括信息的由来（问为什么？）以及与其他信息是怎么联系在一起的。</p><p>拓展有三种主要方式：深度拓展、横向拓展和纵向拓展。</p><p><strong>深度拓展（知识的背景探究）</strong></p><p>知识从何而来？结论来自何处？一个发现是如何做出的？事物为什么以这种方式存在？深度拓展需要在信息内部创造联系。不是仅仅理解一个结论就结束了，要进一步理解结论之前的试验，试验是怎么做的？是谁做的？怎么想起来做的？如此这般之后，结论就建立在与其他相关知识联系的基础之上了。</p><p>深度拓展的缺点是需要很多探索。有些学科本身提供了一定程度的深度拓展，但是往往深度不够；有的学科根本就没有提供，只是孤零零的结论。深度拓展可能是牢牢锁定知识的最佳方法，<br>但是同时也是最花时间的工作。</p><p>当然，我们在知其然也要知其所以然的研究中，也要具体问题具体分析，并不是没有一个知识点都需要这样，一定要根据当前的价值、兴趣点、必须性进行筛选。</p><p><strong>横向拓展</strong></p><p>知识不会孤立地存在，与此类似的结论还有哪些？是哪些地方类似？不同的地方在哪里？同一时期还有哪些其他的发现，同一个发现者还有哪些发现，在同一领域里还有哪些发现？围绕这一结论有哪些其他的事实？</p><p>横向拓展需要在知识周围建立联系，通常意味着你需要建立模型，在模型与原知识之间建立联系。比如将发生在古希腊的一件事与另一件发生在古代中国的事情联系起来。</p><p><strong>纵向拓展</strong></p><p>知识都遵循一定的模式，同样的模式在其他知识中也会见到，你能将一个公式与一个自然事件相联系吗？比如水的流动或是驾驶汽车？如果这个发现与一个看起来完全不相关的历史事件联系在一起，你能发现什么类似之处吗？想想看地震的预测与八国联军事件有什么相似之处吗？</p><p>纵向拓展要求在结构间建立高速通道，它有益于创造性思考，赋予你神奇的力量，帮助你理解知识。￼</p><p>「纠错」和「应用」阶段不做赘述，总之是要每个阶段不停的确认是否已经完成。以及将知识学以致用。</p><p>另外，根据所学的内容不同，把不同的内容信息进行归类，按照不同的方式进行梳理学习，这样更加有效。</p><p>理论上划分为 5 类信息类型：</p><ul><li>随意信息</li><li>观点信息</li><li>过程信息</li><li>具体信息</li><li>抽象信息</li></ul><p>这 5 类基本上涵盖了学校里的课程和实际生活中能遇到的所有信息类型。有些信息介于两种类型之间，比如物理学游走于抽象信息和具体信息之间，生物学则可能既有随意信息又有具体信息。实际上，大多数学科都是上述各种信息的组合，不过是比例不同。</p><p><strong>随意信息</strong></p><p>随意信息是一系列事实、日期、定义或规则，它们缺少逻辑分类，常常在学校里碰到，很少在真实世界里遇到。很多医学专业的新生在学解剖时，会遇到大量需要死记硬背的知识，比如人有206块骨头等。这些知识看起来没有规律，无法再加工。需要死记硬背的知识就是随意信息。</p><p><strong>观点信息</strong></p><p>观点信息是存在争论的信息。小乘佛教和大乘佛教哪一个更优秀？这就是观点，观点信息在论文中很常见，关于这类信息，大家的意见不一致，而当你需要做决定时却非常重要。（什么是健康饮食？哪一行业发展前景更好？）。图表法对于观点来说也是非常有用的方法，它能在阅读以后提取出关键思想。</p><p><strong>过程信息</strong></p><p>过程信息是教导你怎么行动的信息，是讲述一系列动作、操作的信息。比如，讲述如何游泳的知识，编写一段电脑程序，建造一所房子以及设计一个模型都依赖于过程信息。学习这类信息最重要的是不断练习、反复去做。不过，建立正确的背景概念对于节约时间也同样关键。</p><p><strong>具体信息</strong></p><p>具体信息是那些在实际中可以观察到、听到、触到的信息，比如医学上的视、触、叩、听得到的信息就是具体信息，不过实际上，大多数信息都介于抽象和具体之间。</p><p><strong>抽象信息</strong></p><p>抽象信息缺少与感官的直接联系。数学、物理、心理学、计算机和化学主要涉及的是抽象信息。量子物理学和微积分中有大量抽象的信息，不容易马上想象出图像来。<br>￼<br>抽象信息与随意信息正好相反。抽象信息非常难以理解，但是逻辑性很强，学习时好比潜入深海的探索，随意信息则非常浅显，但是逻辑性差。</p><p>学习一个新问题时，首先要判断信息主要属于哪一类？确定信息的类型可以帮助我们决定学习时采用什么技术，以及估计记忆时可能会遇到的困难。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整体性学习是一种学习理论，它更精确、全面地描述了我们大脑是如何工作的。</summary>
    
    
    
    
    <category term="Notes" scheme="http://example.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>特征工程：数据标准化之Max-Min标准化</title>
    <link href="http://example.com/2020/12/31/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96%E4%B9%8BMax-Min%E6%A0%87%E5%87%86%E5%8C%96/"/>
    <id>http://example.com/2020/12/31/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96%E4%B9%8BMax-Min%E6%A0%87%E5%87%86%E5%8C%96/</id>
    <published>2020-12-31T03:02:48.021Z</published>
    <updated>2021-01-06T08:07:52.029Z</updated>
    
    <content type="html"><![CDATA[<p>数据标准化是处理不同规模和量纲数据的方式，使其缩放到相同的数据区间和范围，以减少规模、特征、分布差异等对模型的影响。比如：员工数量的值是 50 - 2000 人，销售额的值是 1000000 - 5000000 万。单位尺度不同，使用梯度下降算法，就需要很多次迭代。<a id="more"></a></p><p>Max-Min 标准化方法是对原始数据进行线性变换，假设原转换的数据为 x，新数据为 x′，那么 x’=(x-min)/(max-min)，其中 min 和 max 为 x 所在列的最小值和最大值。得到的数据会完全落入 [0, 1] 区间内。</p><p>Python 中的 sklearn 库使用起来比较方便，接下来还是演示下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到小费数据集</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据介绍： total_bill列为消费总金额；tip列为小费金额；sex列为顾客性别；smoker列为顾客是否抽烟；day列为消费的星期；time列为聚餐的时间段；size列为聚餐人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609396583058-d74568d5-3835-4e85-99d2-03858bb02f54.png#align=left&display=inline&height=158&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=345&size=15083&status=done&style=none&width=345" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tips = tips.drop([<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;smoker&#x27;</span>,<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;time&#x27;</span>],axis=<span class="number">1</span>)</span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609396628401-cde98d3e-7d6c-4afc-a5e1-d92a1d09c2ed.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=image.png&originHeight=159&originWidth=154&size=6936&status=done&style=none&width=154" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">result = scaler.fit_transform(tips)</span><br><span class="line">result[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[0.29157939, 0.00111111, 0.2       ],</span><br><span class="line">       [0.1522832 , 0.07333333, 0.4       ],</span><br><span class="line">       [0.3757855 , 0.27777778, 0.4       ],</span><br><span class="line">       [0.43171345, 0.25666667, 0.2       ],</span><br><span class="line">       [0.45077503, 0.29      , 0.6       ]])</span><br></pre></td></tr></table></figure><p>通过这个演示也可以看到，Max-Min标准化只能用在数值型特征上，不适用在分类变量。 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据标准化是处理不同规模和量纲数据的方式，使其缩放到相同的数据区间和范围，以减少规模、特征、分布差异等对模型的影响。比如：员工数量的值是 50 - 2000 人，销售额的值是 1000000 - 5000000 万。单位尺度不同，使用梯度下降算法，就需要很多次迭代。</summary>
    
    
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="特征工程" scheme="http://example.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化：用箱线图快速查看特征异常值</title>
    <link href="http://example.com/2020/12/30/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9A%E7%94%A8%E7%AE%B1%E7%BA%BF%E5%9B%BE%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8B%E7%89%B9%E5%BE%81%E5%BC%82%E5%B8%B8%E5%80%BC/"/>
    <id>http://example.com/2020/12/30/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9A%E7%94%A8%E7%AE%B1%E7%BA%BF%E5%9B%BE%E5%BF%AB%E9%80%9F%E6%9F%A5%E7%9C%8B%E7%89%B9%E5%BE%81%E5%BC%82%E5%B8%B8%E5%80%BC/</id>
    <published>2020-12-30T14:34:33.169Z</published>
    <updated>2020-12-31T09:49:34.180Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一个快速查看异常值的简单方法，还是记录一下。<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_data_file = <span class="string">&quot;/zhengqi_train.txt&quot;</span></span><br><span class="line">train_data = pd.read_csv(train_data_file, sep=<span class="string">&#x27;\t&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">train_data.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609338796398-070dfe4e-51ad-4c61-969c-ebea10d18c30.png#align=left&display=inline&height=200&margin=%5Bobject%20Object%5D&name=image.png&originHeight=400&originWidth=1930&size=81325&status=done&style=none&width=965" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">18</span>, <span class="number">10</span>))</span><br><span class="line">plt.boxplot(x=train_data.values,labels=train_data.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># matplotlib.pyplot.hlines(y, xmin, xmax)表示横线，参数(y的值，横线开始横坐标，横线结束横坐标)</span></span><br><span class="line">plt.hlines([-<span class="number">5</span>, <span class="number">5</span>], <span class="number">0</span>, <span class="number">40</span>, colors=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609338837908-a20a8190-735b-48de-9adc-1f3ebe01a7c8.png#align=left&display=inline&height=575&margin=%5Bobject%20Object%5D&name=output_2_0.png&originHeight=575&originWidth=1056&size=44716&status=done&style=none&width=1056" alt="output_2_0.png"></p><p>这里是查看异常值，没有预测异常值。只是把所有特征放进来，再加上参考线，方便查看。适合快速出模型。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近看到一个快速查看异常值的简单方法，还是记录一下。</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="数据可视化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Pandas：数据选取的4种方式</title>
    <link href="http://example.com/2020/12/30/Pandas%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%80%89%E5%8F%96%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2020/12/30/Pandas%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%80%89%E5%8F%96%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-12-30T06:49:15.215Z</published>
    <updated>2021-01-05T03:50:20.988Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas 数据选取的 4 种方式。<a id="more"></a></p><p>4 种方式：</p><ul><li>使用 loc() 和 iloc() 选取单独几行</li><li>使用 isin() 查找和选取对应数据</li><li>使用 unique() 选出唯一值</li><li>使用 df.nlargest() 和 df.nsmallest()</li></ul><h4 id="使用loc和iloc选取单独几行"><a href="#使用loc和iloc选取单独几行" class="headerlink" title="使用loc和iloc选取单独几行"></a>使用loc和iloc选取单独几行</h4><p><strong>使用loc 按行索引标签选取数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: pd.date_range(<span class="string">&#x27;2019/01/01&#x27;</span>,periods=<span class="number">6</span>), </span><br><span class="line">                   <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">                   <span class="string">&#x27;C&#x27;</span>: np.arange(<span class="number">10</span>, <span class="number">16</span>)&#125;)</span><br><span class="line">df = df.set_index(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605165871551-de19839c-229d-4db3-8ef9-d05faf7c480c.png#align=left&display=inline&height=217&margin=%5Bobject%20Object%5D&name=image.png&originHeight=217&originWidth=136&size=5852&status=done&style=none&width=136" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  选取单独一行</span></span><br><span class="line"><span class="comment"># df.loc[&#x27;2019-01-01&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取从2019-01-01行到2019-01-03行</span></span><br><span class="line">df.loc[<span class="string">&#x27;2019-01-01&#x27;</span>:<span class="string">&#x27;2019-01-03&#x27;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605165902027-9abeb27a-df8d-444d-a55f-65e1baefa21e.png#align=left&display=inline&height=140&margin=%5Bobject%20Object%5D&name=image.png&originHeight=140&originWidth=129&size=4043&status=done&style=none&width=129" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取从2019-01-01行到2019-01-03行,对应的B列</span></span><br><span class="line">df.loc[<span class="string">&#x27;2019-01-01&#x27;</span>:<span class="string">&#x27;2019-01-03&#x27;</span>,<span class="string">&#x27;B&#x27;</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">2019-01-01    a</span><br><span class="line">2019-01-02    b</span><br><span class="line">2019-01-03    c</span><br><span class="line">Name: B, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选出B列中类型是c的行</span></span><br><span class="line"><span class="comment"># df[df[&#x27;B&#x27;] == &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选出B列中类型是c的行</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;B&#x27;</span>]==<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605165931557-e1f6ec09-36a1-47c6-b83d-f5c42f24b01e.png#align=left&display=inline&height=83&margin=%5Bobject%20Object%5D&name=image.png&originHeight=83&originWidth=130&size=2324&status=done&style=none&width=130" alt="image.png"></p><p><strong>使用iloc按索引位置选取数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取第1行的数据，Series格式</span></span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B     a</span><br><span class="line">C    10</span><br><span class="line">Name: 2019-01-01 00:00:00, dtype: object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取第1行的数据，DataFrame格式</span></span><br><span class="line">df.iloc[[<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605165958232-c0607b50-80df-4604-99e1-acdb0fc6ecec.png#align=left&display=inline&height=82&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=124&size=2208&status=done&style=none&width=124" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取第1行，第2个列的数值</span></span><br><span class="line">df.iloc[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择第1行和第4行数据，前闭后开</span></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605165988596-0e2429d9-d071-450d-af74-464df0b25a0e.png#align=left&display=inline&height=107&margin=%5Bobject%20Object%5D&name=image.png&originHeight=107&originWidth=127&size=3333&status=done&style=none&width=127" alt="image.png"></p><h4 id="使用isin-查找和选取对应数据"><a href="#使用isin-查找和选取对应数据" class="headerlink" title="使用isin()查找和选取对应数据"></a>使用isin()查找和选取对应数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: pd.date_range(<span class="string">&#x27;2019/01/01&#x27;</span>,periods=<span class="number">5</span>), </span><br><span class="line">                   <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605166024593-990c5d8d-06c1-417a-8909-83c5903276ae.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&name=image.png&originHeight=165&originWidth=119&size=4569&status=done&style=none&width=119" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-01-03&#x27;</span>]</span><br><span class="line">df = df.loc[df[<span class="string">&#x27;A&#x27;</span>].isin(data), [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605166049429-c0f3edc2-e957-44c9-b9c5-8604ea099b0d.png#align=left&display=inline&height=76&margin=%5Bobject%20Object%5D&name=image.png&originHeight=76&originWidth=117&size=2846&status=done&style=none&width=117" alt="image.png"></p><h4 id="使用unique-选出唯一值"><a href="#使用unique-选出唯一值" class="headerlink" title="使用unique()选出唯一值"></a>使用unique()选出唯一值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>,<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># unique()选出唯一值,并且会按照升序排列 </span></span><br><span class="line">a = np.unique(A)</span><br><span class="line">a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># return_index=True表示返回新列表元素在旧列表中的位置，并以列表形式储存在s中</span></span><br><span class="line">a, s= np.unique(A, return_index=<span class="literal">True</span>)</span><br><span class="line">s</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([0, 1, 4, 5, 3])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># return_inverse=True 表示返回旧列表元素在新列表中的位置，并以列表形式储存在p中</span></span><br><span class="line">a, s, p = np.unique(A, return_index=<span class="literal">True</span>, return_inverse=<span class="literal">True</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([0, 1, 1, 4, 2, 3, 2])</span><br></pre></td></tr></table></figure><h4 id="使用-df-nlargest-和-df-nsmallest"><a href="#使用-df-nlargest-和-df-nsmallest" class="headerlink" title="使用 df.nlargest() 和 df.nsmallest()"></a>使用 df.nlargest() 和 df.nsmallest()</h4><p>在之前的实现方式，df.head() 用来查看前多少行数据，然后需要找到最大的话，往往分两步，把 df 进行排序，然后选择前多少行数据。而这两个函数分别是取df最大的前几个，和最小的前几个，比较实用。</p><p><strong>参数解释</strong></p><p>tips.nlargest(n, columns, keep=’first’)</p><ul><li><code>n</code>:前xx个，int值</li><li><code>columns</code>：列名</li><li><code>keep=&#39;first&#39;</code>:keep=’first’或者’last’。当出现重复值时，keep=’first’,会选取在原始DataFrame里排在前面的数据，keep=’last’则去排后面的数据。</li></ul><p>还是拿小费数据集演示下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到小费数据集</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据介绍： total_bill列为消费总金额；tip列为小费金额；sex列为顾客性别；smoker列为顾客是否抽烟；day列为消费的星期；time列为聚餐的时间段；size列为聚餐人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605166272569-8c787fb4-af24-4569-a314-383ed5cb5a20.png#align=left&display=inline&height=163&margin=%5Bobject%20Object%5D&name=image.png&originHeight=163&originWidth=343&size=15042&status=done&style=none&width=343" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择最大的前5行，total_bill 数据列</span></span><br><span class="line">tips.nlargest(<span class="number">5</span>,<span class="string">&#x27;total_bill&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605166292121-6cd66fdf-4fcd-4425-a28e-e9b0b658c3c9.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&name=image.png&originHeight=164&originWidth=351&size=15896&status=done&style=none&width=351" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择最小的前5行，total_bill 数据列</span></span><br><span class="line">tips.nsmallest(<span class="number">5</span>,<span class="string">&#x27;total_bill&#x27;</span>,keep=<span class="string">&#x27;last&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1605166320920-00e3d9da-e574-439a-b51d-57652707a87e.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&name=image.png&originHeight=164&originWidth=360&size=15028&status=done&style=none&width=360" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pandas 数据选取的 4 种方式。</summary>
    
    
    
    
    <category term="Pandas" scheme="http://example.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化：heatmap使用使用掩码去掉部分展示</title>
    <link href="http://example.com/2020/12/30/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9Aheatmap%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8E%A9%E7%A0%81%E5%8E%BB%E6%8E%89%E9%83%A8%E5%88%86%E5%B1%95%E7%A4%BA/"/>
    <id>http://example.com/2020/12/30/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9Aheatmap%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8E%A9%E7%A0%81%E5%8E%BB%E6%8E%89%E9%83%A8%E5%88%86%E5%B1%95%E7%A4%BA/</id>
    <published>2020-12-30T05:03:49.204Z</published>
    <updated>2020-12-30T06:05:28.912Z</updated>
    
    <content type="html"><![CDATA[<p>去掉热力图的部分内容，这样使得重点更清晰。还是来个小案例演示。<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到小费数据集</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;titanic&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609304479785-6609914a-e3d8-4741-9c73-98c11db015bc.png#align=left&display=inline&height=162&margin=%5Bobject%20Object%5D&name=image.png&originHeight=162&originWidth=812&size=27609&status=done&style=none&width=812" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corr = tips.corr()</span><br><span class="line">corr</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609304501770-2a1afabf-f8a7-4b59-8c2b-2376706a1db7.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&name=image.png&originHeight=238&originWidth=623&size=37907&status=done&style=none&width=623" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">sns.heatmap(corr,square=<span class="literal">True</span>, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;0.2f&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609304520537-dccd6c69-4567-4d57-a9f4-fe6ec5f35862.png#align=left&display=inline&height=406&margin=%5Bobject%20Object%5D&name=image.png&originHeight=406&originWidth=478&size=42509&status=done&style=none&width=478" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))  <span class="comment"># 指定绘图对象宽度和高度</span></span><br><span class="line">mask = np.zeros_like(corr, dtype=np.<span class="built_in">bool</span>)  <span class="comment"># 构造与corr同维数矩阵为bool型矩阵</span></span><br><span class="line">mask[np.triu_indices_from(mask)] = <span class="literal">True</span>  <span class="comment"># 角分线右侧为True</span></span><br><span class="line">g = sns.heatmap(corr, mask=mask,square=<span class="literal">True</span>, annot=<span class="literal">True</span>, fmt=<span class="string">&#x27;0.2f&#x27;</span>)  <span class="comment"># 热力图（看两两相似度）</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609304528995-843dc5f9-b763-4977-b55d-93bf6b16a391.png#align=left&display=inline&height=402&margin=%5Bobject%20Object%5D&name=output_4_0.png&originHeight=402&originWidth=478&size=23258&status=done&style=none&width=478" alt="output_4_0.png"></p><p>其中，mask[np.triu_indices_from(mask)] = True 将 <code>mask</code> 的对角线及以上设置为 <code>True</code>。这部分就是对应要被遮掉的部分，不清楚可以把<code>mask</code> 打印出来看看。</p><p>还有一个关键点是 sns.heatmap() 的 <code>mask</code> 参数：布尔数组或者 DataFrame 数据，可选参数。如果为空值，数据将不会显示在 <code>mask</code> 为 <code>True</code>  的单元格中。 具有缺失值的单元格将自动被屏蔽。所以，将 <code>mask</code> 设置为 <code>True</code> 是为了有一个掩码可以去掉右上角的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = np.zeros_like(corr, dtype=np.<span class="built_in">bool</span>)  <span class="comment"># 构造与corr同维数矩阵为bool型</span></span><br><span class="line">mask[np.triu_indices_from(mask)] = <span class="literal">True</span>  <span class="comment"># 角分线右侧为True</span></span><br><span class="line">mask</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array([[ True,  True,  True,  True,  True,  True,  True,  True],</span><br><span class="line">       [False,  True,  True,  True,  True,  True,  True,  True],</span><br><span class="line">       [False, False,  True,  True,  True,  True,  True,  True],</span><br><span class="line">       [False, False, False,  True,  True,  True,  True,  True],</span><br><span class="line">       [False, False, False, False,  True,  True,  True,  True],</span><br><span class="line">       [False, False, False, False, False,  True,  True,  True],</span><br><span class="line">       [False, False, False, False, False, False,  True,  True],</span><br><span class="line">       [False, False, False, False, False, False, False,  True]])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;去掉热力图的部分内容，这样使得重点更清晰。还是来个小案例演示。</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="数据可视化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>简单说说对大数据的态度</title>
    <link href="http://example.com/2020/12/30/%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%81%E5%BA%A6/"/>
    <id>http://example.com/2020/12/30/%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4%E5%AF%B9%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%81%E5%BA%A6/</id>
    <published>2020-12-30T03:29:22.939Z</published>
    <updated>2020-12-30T06:34:28.776Z</updated>
    
    <content type="html"><![CDATA[<p>近期看到纽约大学教授盖瑞·马库斯一个观点，从科学方法角度提醒政府、社会以及科学研究者对别对大数据迷恋，引人深思。<a id="more"></a></p><p>延伸一下，这位教授既做科研，也做企业。最近有本翻译的新书<a href="https://weread.qq.com/web/reader/e483297071df7108e482b8bkc81322c012c81e728d9d180">《如何创造可信的AI》</a>，陆奇作序，可读性高。也是他写的。</p><p>好了，回到主题，盖瑞·马库斯表述的观点大致是这样：</p><p>并非是我们不应该相信大数据，或收集大数据，而是不应该把它当成魔法。虽然几乎所有领域都受益于精心收集的大型数据集，但太多人、甚至是科学家，都过分依赖大数据。从物理学到神经科学，比如最近关于了解科学的讨论看起来有一半涉及大数据以及相关工具，比如“维数约简”、“神经网络”、“机器学习算法”和“信息可视化”等。</p><p>但是，科学从根本上依然围绕宇宙规律的探索，而大数据并不擅长的一件事就是发现定律。它善于检测相关性，数据集越可靠，发现其相关性的可能性就越高，即使是涉及多个变量的复杂数据。但相关性从来都不是一种因果关系，以后也不会是。世界上所有的大数据都不会告诉你，吸烟是否会导致肺癌，你必须做实验，了解致癌物、致癌基因和 DNA 复制等专业词汇的固有含义。仅将世界各个城市烟民和非烟民海量数据库制成表格，记录他们何时、何地抽烟，寿命以及死因的细节，这些数据无论包含多少兆字节，都不足以涵盖生物机制的多重复杂性。</p><p>神经科学某些分支的专家已经持如下态度——“建好大数据，结果自然就明了了。”他们认为一旦拥有足够的数据，神经科学问题就能迎刃而解。然而，这种想法并不正确。如果我们的猜想有理有据，那么可以用大数据测试一下，但它绝不该是我们的第一选择。</p><p>并且在最后说明：<strong>只有我们知道自己在寻找什么的时候，才应该向大数据寻求帮助</strong>。</p><p>作为从业者，说说我的理解。</p><p>大数据从来不是一件事情、任务的起因。所有项目立项核心考虑：用户场景、行业情况、项目资源。数据分析是作为工具，辅助决策。和项目是依附关系，不是因果关系。</p><p>另外，大数据意味着事情已经发生，在商业世界，对已经发生的事精做过多分析会造成徒劳无功。比如说：在线教育、SaaS 行业的用户流失分析。对流失用户精细分析，对召回流失用户可能性不大。大数据可以预测用户流失情况，但这只是提前知晓，要改变流失情况还是需要更多产品运营动作干预。在这个维度下，拥有大数据能力，主要做的是「观察」。</p><p>在一些情况下，数据结论越明显，反而错的越明显。最近在看电商订单情况，就以淘宝待付款订单状态举例。</p><p>下图是淘宝待付款订单，进行订单取消操作的具体选项。流程是：待付款订单 – 取消订单 – 选择取消订单原因（默认「价格有点贵」选项）– 确定取消。这个功能初衷，应该是淘宝/商家都希望通过这些选项，了解消费者取消订单的真实意图。根据原因占比来优化流程。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609299339173-b785e425-bf9b-466f-8d4c-bd10d5660479.png#align=left&display=inline&height=352&margin=%5Bobject%20Object%5D&name=image.png&originHeight=704&originWidth=680&size=127326&status=done&style=none&width=340" alt="image.png"></p><p>但整个流程走下来就能得知，目前设定下，一定是「价格有点贵」占比最高，因为这是默认选项。多数消费者行为应该是直接点击“确定取消”按钮。这里有两点：</p><p>第一，「价格有点贵」这个选项，即使占比最高，我想淘宝的数据分析师也会将这个选项剔除，因为无意义；至于为什么要默认选「价格有点贵」，我想正是因为“价格有点贵”无意义，因为价格的预期，每位消费者都不一样。并且，消费者肯定是希望越低越好。</p><p>第二，如果这个环节优化为：去掉「价格有点贵」选项，并且不默认选中任何选项，会不会更好？得到这个结论就需要从用户体验指标和获取订单取消原因有效率来衡量了。这是另一个话题。</p><p>回到这个案例，占比最高的数据并不能说明问题，还有可能形成错误引导。<strong>数据之所以呈现成这样，是因为产品设计是这样，而不是用户想这样</strong>。</p><p>所以，我理解盖瑞·马库斯说的“只有我们知道自己在寻找什么的时候，才应该向大数据寻求帮助。”是要先有定性判断、想法，再以大数据作为辅助。才能不偏不倚。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期看到纽约大学教授盖瑞·马库斯一个观点，从科学方法角度提醒政府、社会以及科学研究者对别对大数据迷恋，引人深思。</summary>
    
    
    
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>统计学：相关系数介绍</title>
    <link href="http://example.com/2020/12/29/%E7%BB%9F%E8%AE%A1%E7%9F%A5%E8%AF%86%EF%BC%9A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2020/12/29/%E7%BB%9F%E8%AE%A1%E7%9F%A5%E8%AF%86%EF%BC%9A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-29T09:50:02.639Z</published>
    <updated>2020-12-29T09:52:55.100Z</updated>
    
    <content type="html"><![CDATA[<p>介绍相关系数，和Python实现。<a id="more"></a></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>说到相关系数需要了解的 3 个概念：相关分析、数据期望、协方差。先分别说明这些概念。</p><p><strong>相关分析</strong><br>相关分析是用来说明两个变量之间的关系。这个关系包含：两个变量的方向和强度。</p><ul><li>按变量的多少划分： 单相关、复相关 ；</li><li>按表现形态划分:：直线相关、曲线相关；</li><li>从变动的方向划分：正相关、负相关；</li><li>按相关的程度不同分：完全相关、统计相关、完全无关。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1603873582000-0bfd75df-8500-4785-b302-1ceb2cef0c52.png#align=left&display=inline&height=496&margin=%5Bobject%20Object%5D&name=image.png&originHeight=992&originWidth=984&size=138258&status=done&style=none&width=492" alt="image.png"></p><p><strong>数学期望</strong><br>例子：某城市有 10 万个家庭，没有孩子的家庭有 1000 个，有一个孩子的家庭有 9 万个，有两个孩子的家庭有 6000 个，有 3 个孩子的家庭有 3000 个。则此城市中任一个家庭中孩子的数目是一个随机变量，记为 X。它可取值 0，1，2，3。其中，X 取 0 的概率为 0.01，取 1 的概率为 0.9，取 2 的概率为 0.06，取 3 的概率为 0.03。则它的数学期望：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/svg/613759/1599092036220-b6fa5f70-fc48-4836-9c3f-a3cda9ef000b.svg#align=left&display=inline&height=24&margin=%5Bobject%20Object%5D&originHeight=24&originWidth=502&size=0&status=done&style=none&width=502"></p><p>即此城市一个家庭平均有小孩  1.11 个，当然人不可能用 1.11 个来算，约等于 2 个。</p><p><strong>协方差</strong><br>协方差可以看这篇文章，已经说得比较清楚。<a href="https://www.matongxue.com/madocs/568/">《如何通俗地理解协方差与相关系数？》</a></p><p><strong>相关系数</strong></p><ul><li>Pearson 相关系数：一般用来计算两个连续型变量的相关系数。也是最常用的相关系数。公式这里就不写了，一些统计学的教程都有说明。当两个变量的标准差都不为零时，相关系数才有定义，皮尔逊相关系数适用于：<ol><li>两个变量之间是线性关系，都是连续数据。</li><li>两个变量的总体是正态分布，或接近正态的单峰分布。</li><li>两个变量的观测值是成对的，每对观测值之间相互独立。</li></ol></li><li>Spearman 相关系数：两个变量无论连续还是分类都可以使用。</li><li>kendall 相关系数：一个连续一个分类。最好是定序变量。</li></ul><p>相关系数是公式的不同。主要的 Pearson 相关系数在上面那篇《如何通俗地理解协方差与相关系数？》中也有，这里不多做介绍。</p><p>−1 ≤ 𝐶𝑜𝑟𝑌,𝑋 ≤ 1 代表的含义：</p><ol><li>值： Y 和 X 之间线性关系的强度；</li><li>符号： Y 和 X 之间线性关系的方向。</li></ol><p>关于相关系数 r 的取值说明：</p><ol><li>r 的取值范围为 -1 ≤ r ≤ + 1；</li><li>|r| 越接近 1，表明相关关系越密切；越接近于0，相关关系就越不密切。r = 0，两变量无直线关系；</li><li>r = +1 或 r = -1,表明两变量完全相关；</li><li>r &gt; 0 现象呈正直线关系；r &lt; 0 现象呈负相关；</li><li>在说明两个变量之间线性关系的密切程度时，根据经验可将相关程度分为以下几种情况：当 |r|  ≥  0.8 时，视为高度相关；0.5 ≤ |r| &lt; 0.8 时， 视为中度相关；0.3 ≤ |r| &lt; 5时，视为低度相关； |r| &lt; 0.3 时，说明两个变量之间的相关程度极弱，可视为不相关。但这种说明必须建立在相关系数通过显著性检验的基础之上。</li></ol><h4 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到titanic数据集</span></span><br><span class="line">titanic = sns.load_dataset(<span class="string">&#x27;titanic&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1603873841737-87d6dc17-8129-4cd0-97ac-2da95db898ea.png#align=left&display=inline&height=162&margin=%5Bobject%20Object%5D&name=image.png&originHeight=162&originWidth=818&size=27394&status=done&style=none&width=818" alt="image.png"><br>参数说明：</p><ul><li>method{‘pearson’, ‘kendall’, ‘spearman’} ，默认 Pearson 相关系数；</li><li>min_periods：int类型可选值。观察每对列所需的最小数，样本最少的数据量。仅适用于 Pearson 和Spearman。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corr = titanic.corr()</span><br><span class="line">corr</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1603873908679-37d13fbd-f717-4bcf-a0b6-4709530d73b4.png#align=left&display=inline&height=243&margin=%5Bobject%20Object%5D&name=image.png&originHeight=243&originWidth=624&size=37919&status=done&style=none&width=624" alt="image.png"></p><p><strong>相关系数可视化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">10</span>))</span><br><span class="line">sns.heatmap(corr,linewidths=<span class="number">0.2</span>, cmap=<span class="string">&quot;YlGnBu&quot;</span>,annot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1603873925652-9aa02770-8c26-40bf-a1d8-8672d684a4bd.png#align=left&display=inline&height=579&margin=%5Bobject%20Object%5D&name=output_4_1.png&originHeight=579&originWidth=754&size=41369&status=done&style=none&width=754" alt="output_4_1.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍相关系数，和Python实现。</summary>
    
    
    
    
    <category term="统计学" scheme="http://example.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Pandas：axis的位置说明</title>
    <link href="http://example.com/2020/12/29/Pandas%EF%BC%9Aaxis%E7%9A%84%E4%BD%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2020/12/29/Pandas%EF%BC%9Aaxis%E7%9A%84%E4%BD%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</id>
    <published>2020-12-29T07:32:57.761Z</published>
    <updated>2021-01-05T06:04:43.685Z</updated>
    
    <content type="html"><![CDATA[<p> 先看一个演示。<a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到小费数据集</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据介绍： total_bill列为消费总金额；tip列为小费金额；sex列为顾客性别；smoker列为顾客是否抽烟；day列为消费的星期；time列为聚餐的时间段；size列为聚餐人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609226941755-0c9393d7-afd9-4db5-85ea-308427f352b2.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&name=image.png&originHeight=164&originWidth=347&size=15120&status=done&style=none&width=347" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tips = tips.drop([<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;smoker&#x27;</span>,<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;time&#x27;</span>],axis=<span class="number">1</span>)</span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609226958701-7dbedc61-feab-4467-bbdd-135dbe7a8897.png#align=left&display=inline&height=162&margin=%5Bobject%20Object%5D&name=image.png&originHeight=162&originWidth=158&size=7027&status=done&style=none&width=158" alt="image.png"></p><p><code>axis</code> 使用 0 值表示沿着每一列或行标签\索引值向下执行方法；使用 1 值表示沿着每一行或者列标签模向执行对应的方法。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1609227050243-fe33bb4c-ab6f-4f62-8cdd-6f4118e7c351.png#align=left&display=inline&height=341&margin=%5Bobject%20Object%5D&name=image.png&originHeight=341&originWidth=652&size=95214&status=done&style=none&width=652" alt="image.png"></p><p>如上图，在 Pandas 中， <code>axis</code> 的位置图示。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 先看一个演示。</summary>
    
    
    
    
    <category term="Pandas" scheme="http://example.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python常见的字符串操作</title>
    <link href="http://example.com/2020/12/29/Python%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2020/12/29/Python%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</id>
    <published>2020-12-29T03:46:08.630Z</published>
    <updated>2020-12-29T03:48:23.829Z</updated>
    
    <content type="html"><![CDATA[<p>总结下Python一部分字符串操作的基础总结。</p><a id="more"></a><p>文章目录如下：</p><ul><li>使用str.split() 切分数据</li><li>将datetime类型转化为字符串类型</li><li>字符串的合并操作</li><li>使用 str.strip() 去除字符串前面和后面所有的字符串</li><li>替代字符串中的某些字符串为另外的字符串</li><li>Python 中的 i++，i+</li></ul><p>下面简单的演示。</p><h4 id="使用str-split-切分数据"><a href="#使用str-split-切分数据" class="headerlink" title="使用str.split() 切分数据"></a>使用str.split() 切分数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">man = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>:[<span class="string">&#x27;张三|男&#x27;</span>,<span class="string">&#x27;李四|男&#x27;</span>,<span class="string">&#x27;王五|男&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">man</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1606647338906-e3bce98c-2eff-44f2-83f2-fd779b754ce1.png#align=left&display=inline&height=114&margin=%5Bobject%20Object%5D&name=image.png&originHeight=228&originWidth=150&size=6410&status=done&style=none&width=75" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用str.split() 把数据分成两列</span></span><br><span class="line">man = man[<span class="string">&#x27;data&#x27;</span>].apply(<span class="keyword">lambda</span> x :Series(x.split(<span class="string">&#x27;|&#x27;</span>)))</span><br><span class="line">man</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1606647357289-ce63d5c5-264b-4a9f-8775-b1fde14da559.png#align=left&display=inline&height=109&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=158&size=5938&status=done&style=none&width=79" alt="image.png"></p><h4 id="将datetime类型转化为字符串类型"><a href="#将datetime类型转化为字符串类型" class="headerlink" title="将datetime类型转化为字符串类型"></a>将datetime类型转化为字符串类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将datetime类型转化为字符串类型</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">stamp = datetime(<span class="number">2019</span>,<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">stamp</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime(2019, 5, 1, 0, 0)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str_stamp= <span class="built_in">str</span>(stamp)</span><br><span class="line">str_stamp</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;2019-05-01 00:00:00&#39;</span><br></pre></td></tr></table></figure><h4 id="字符串的合并操作"><a href="#字符串的合并操作" class="headerlink" title="字符串的合并操作"></a>字符串的合并操作</h4><p><strong>使用join()连接字符串数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># join()：连接字符串数组。将字符串、元组、列表、Series中的元素以指定的字符(分隔符)连接生成一个新的字符串</span></span><br><span class="line">a=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line">text = <span class="string">&#x27;  &#x27;</span>.join(a)</span><br><span class="line">text</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;1  2  3  4  5&#39;</span><br></pre></td></tr></table></figure><p><strong>使用 + 连接字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用加号</span></span><br><span class="line">x = <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;ab&#39;</span><br></pre></td></tr></table></figure><p><strong>使用format()将多个字符串合并，主要用在变量输出上</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;i am &#123;1&#125; and &#123;0&#125; years old&#x27;</span>.<span class="built_in">format</span>(<span class="number">30.</span>, <span class="string">&#x27;Tony&#x27;</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;i am Tony and 30.0 years old&#39;</span><br></pre></td></tr></table></figure><p><strong>使用Pandas自带的cat()函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  Series.str.cat(others=None,  # 要合并的另外一个对象,如果为空则将左侧对象组合</span></span><br><span class="line"><span class="comment">#                 sep=None,     # 合并的分隔符，默认为空</span></span><br><span class="line"><span class="comment">#                 na_rep=None)  # 如果遇到NA值的处理方式，默认忽略</span></span><br><span class="line"></span><br><span class="line">EG = pd.Series([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]).<span class="built_in">str</span>.cat(sep=<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">EG</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;a;b;c&#39;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EG = pd.Series([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]).<span class="built_in">str</span>.cat([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], sep=<span class="string">&#x27;@@&#x27;</span>)</span><br><span class="line">EG</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0    a@@A</span><br><span class="line">1    b@@B</span><br><span class="line">2    c@@C</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h4 id="使用-str-strip-去除字符串前面和后面所有的字符串"><a href="#使用-str-strip-去除字符串前面和后面所有的字符串" class="headerlink" title="使用 str.strip() 去除字符串前面和后面所有的字符串"></a>使用 str.strip() 去除字符串前面和后面所有的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.strip([chars]);去除字符串前面和后面的所有设置的字符串，默认为空格</span></span><br><span class="line">st = <span class="string">&quot;   hello    &quot;</span></span><br><span class="line">st = st.strip()</span><br><span class="line">print(st + <span class="string">&#x27;word&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helloword</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除字符串&#x27;l, o&#x27;</span></span><br><span class="line">st = st.strip(<span class="string">&#x27;l, o&#x27;</span>)</span><br><span class="line">print(st)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">he</span><br></pre></td></tr></table></figure><h4 id="替代字符串中的某些字符串为另外的字符串"><a href="#替代字符串中的某些字符串为另外的字符串" class="headerlink" title="替代字符串中的某些字符串为另外的字符串"></a>替代字符串中的某些字符串为另外的字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.replace(old, new[, max])</span></span><br><span class="line"><span class="comment"># old -- 将被替换的子字符串。</span></span><br><span class="line"><span class="comment"># new -- 新字符串，用于替换old子字符串。</span></span><br><span class="line"><span class="comment"># max -- 可选字符串, 替换不超过 max 次</span></span><br><span class="line"></span><br><span class="line">st = <span class="string">&quot;hello&quot;</span></span><br><span class="line">st = st.replace(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">st</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;healo&#39;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换字符串中的某些子串，可以用正则表达式来匹配被选子串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># re.sub(pattern, repl, string, count=0, flags=0)</span></span><br><span class="line"><span class="comment"># pattern：表示正则表达式中的模式字符串；</span></span><br><span class="line"><span class="comment"># repl：被替换的字符串（既可以是字符串，也可以是函数）；</span></span><br><span class="line"><span class="comment"># string：要被处理的，要被替换的字符串；</span></span><br><span class="line"><span class="comment"># count：匹配的次数, 默认是全部替换</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">st = <span class="string">&quot;hello 2019&quot;</span></span><br><span class="line">st = re.sub(<span class="string">&quot;([0-9]+)&quot;</span>,<span class="string">&quot;word&quot;</span>,st)</span><br><span class="line">print(st)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello word</span><br></pre></td></tr></table></figure><h4 id="Python-中的-i-，i"><a href="#Python-中的-i-，i" class="headerlink" title="Python 中的 i++，i+"></a>Python 中的 i++，i+</h4><p> 顺便在这篇基础下面总结下 Python 中的 i++，i+ 这类写法和 Java 不一样。在新手入门时会有点疑问，这里列一下。</p><p><strong>i+1</strong></p><p>这种都是一样的写法，没什么问题，很好理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>i+</strong></p><p>i+ 就是 Python 中的自增写法。相当于其他语言的 ++i。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    i+=<span class="number">5</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>i-</strong></p><p>Python 中的自减写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    i-=<span class="number">5</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-5</span><br><span class="line">-4</span><br><span class="line">-3</span><br></pre></td></tr></table></figure><p><strong>++i</strong></p><p>Python 中的 ++i，仅仅是作为判断运算符号,类似数学中的负负得正。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 体现在这个案例中，就是对结果值没影响</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    ++i</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>i++</strong></p><p>Python 中不支持这类写法，所以直接报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    i++</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;&lt;ipython-input-21-7faff3d068a4&gt;&quot;, line 2</span><br><span class="line">    i++</span><br><span class="line">       ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结下Python一部分字符串操作的基础总结。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化：sns.kdeplot（核密度估计图）查看数据分布</title>
    <link href="http://example.com/2020/12/29/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9Asns.kdeplot%EF%BC%88%E6%A0%B8%E5%AF%86%E5%BA%A6%E4%BC%B0%E8%AE%A1%E5%9B%BE%EF%BC%89%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83/"/>
    <id>http://example.com/2020/12/29/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9Asns.kdeplot%EF%BC%88%E6%A0%B8%E5%AF%86%E5%BA%A6%E4%BC%B0%E8%AE%A1%E5%9B%BE%EF%BC%89%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83/</id>
    <published>2020-12-29T03:30:52.322Z</published>
    <updated>2020-12-30T05:42:36.093Z</updated>
    
    <content type="html"><![CDATA[<p>接触到核密度估计是 seaborn 库中的 kdeplot （也就是核密度估计图）。它可以比较直观看出样本数据的分布特征。用到查看单个样本数据分布特征，和比较多个样本数据分布是否一致。<a id="more"></a></p><p>我目前最常用的还是在同一变量下，比较测试集和训练集数据的分布差异情况。</p><p>了解数据分布的另一种图示方法是使用直方图。但是使用起来有几个缺点。一个原因是绘制直方图需要确定组距，组距的大小就会确定分布特征。而且使用直方图展示的分布曲线并不平滑。</p><p>回到核密度估计，查阅了一些相关理论，理论讲解部分目前懂了，但是数学公式推导细节还是有些不懂。由于目前只是核密度图来查看数据集分布，所以这部分原理决定还是放一放，后续再花时间。</p><p>常用的还是 seaborn 库的 kdeplot，也就是核密度估计图。下面用 seaborn 库自带的小费数据集演示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到小费数据集</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据介绍： total_bill列为消费总金额；tip列为小费金额；sex列为顾客性别；smoker列为顾客是否抽烟；day列为消费的星期；time列为聚餐的时间段；size列为聚餐人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1604641656010-829f760d-8c68-4ad9-8dde-8c70136a7f0d.png#align=left&display=inline&height=164&margin=%5Bobject%20Object%5D&name=image.png&originHeight=164&originWidth=346&size=15176&status=done&style=none&width=346" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">column = tips.columns.tolist()[:<span class="number">2</span>]  <span class="comment"># 列表头</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>))  <span class="comment"># 指定绘图对象宽度和高度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i + <span class="number">1</span>)  <span class="comment"># 1行2列子图</span></span><br><span class="line">    sns.kdeplot(tips[column[i]],shade=<span class="literal">True</span>)</span><br><span class="line">    plt.xlabel(column[i], fontsize=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1604641604139-fb51ce59-a977-40c5-91df-ab330e7836f6.png#align=left&display=inline&height=261&margin=%5Bobject%20Object%5D&name=output_2_0.png&originHeight=261&originWidth=601&size=19762&status=done&style=none&width=601" alt="output_2_0.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax = sns.kdeplot(tips[<span class="string">&#x27;total_bill&#x27;</span>], color=<span class="string">&quot;Red&quot;</span>, shade=<span class="literal">True</span>)</span><br><span class="line">ax = sns.kdeplot(tips[<span class="string">&#x27;tip&#x27;</span>], color=<span class="string">&quot;Blue&quot;</span>, shade=<span class="literal">True</span>)</span><br><span class="line">ax = ax.legend([<span class="string">&quot;total_bill&quot;</span>,<span class="string">&quot;tip&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1604641610796-fe142201-9b34-4f36-94b5-623468070693.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&name=output_3_0.png&originHeight=248&originWidth=378&size=10435&status=done&style=none&width=378" alt="output_3_0.png"><br>拿小费数据集为例。图一单个看 total_bill 和 tip，两个数据集分布基本一致，都是略微右偏。</p><p>另外。提一个问题：来看图二，放在一起对比就会明显。如果假设一个是测试集数据，另外一个为训练集数据。这类情况是否需要对数据处理进行处理？显然是需要的，因为测试集和训练集分布差距大，会导致模型泛化能力差。这部分根据具体情况看，如果特征足够多，常见的操作是删除差距较大的特征。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接触到核密度估计是 seaborn 库中的 kdeplot （也就是核密度估计图）。它可以比较直观看出样本数据的分布特征。用到查看单个样本数据分布特征，和比较多个样本数据分布是否一致。</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="数据可视化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>几首小诗</title>
    <link href="http://example.com/2020/12/28/%E5%87%A0%E9%A6%96%E5%B0%8F%E8%AF%97/"/>
    <id>http://example.com/2020/12/28/%E5%87%A0%E9%A6%96%E5%B0%8F%E8%AF%97/</id>
    <published>2020-12-28T09:55:23.112Z</published>
    <updated>2020-12-31T06:04:15.177Z</updated>
    
    <content type="html"><![CDATA[<p>年轻人是一定要写诗的。<a id="more"></a></p><p>但近 2 年几乎是没有写了，把之前写的几首存放到这里。</p><p><strong>推手</strong></p><p>被无数人推着走</p><p>沿路都是他们的欲望，更多的是钱权</p><p>我负责浇水、施肥</p><p>然而</p><p>我可不想做浇灌者</p><p>我得是自己梦想的开垦者</p><p><strong>献给监控岗位</strong></p><p>监控才是最无趣的</p><p>因为没有善于发现美的眼睛</p><p>需要拼命寻找人性的恶</p><p><strong>26岁</strong></p><p>有着青年人的面孔，却没有青年人的冲劲</p><p>有着中年人的焦虑，却没有中年人的实力</p><p><strong>致敬美好时代的无病呻吟</strong></p><p>我彻头彻尾的感受到了世界的虚伪 </p><p>因为 </p><p>洗手间居然不是用来洗手的</p><p><strong>可以说这是成熟，也可以说是现实</strong></p><p>一刹那有了留学的梦想躯干</p><p>半天时间还长出了枝桠</p><p>再花了两天时间了解方案</p><p>最终亲自剪了枝桠、砍了躯干</p><p>表面上平静如湖，心里已经浪潮翻转</p><p>20-30岁，第24个梦想</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;年轻人是一定要写诗的。</summary>
    
    
    
    
    <category term="诗词" scheme="http://example.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>判断数据正态分布的 2 个方法</title>
    <link href="http://example.com/2020/12/28/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E7%9A%84%202%20%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2020/12/28/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E7%9A%84%202%20%E4%B8%AA%E6%96%B9%E6%B3%95/</id>
    <published>2020-12-28T08:42:15.579Z</published>
    <updated>2020-12-28T09:12:43.197Z</updated>
    
    <content type="html"><![CDATA[<p>说明判断数据正态分布的 2 个方法，当然也不止 2 种，只是比较常用。</p><a id="more"></a><h3 id="Q-Q图"><a href="#Q-Q图" class="headerlink" title="Q-Q图"></a>Q-Q图</h3><p>Q-Q图（分位数-分位数图）是两个分位数彼此相对的图。分位数是某些值低于该分位数的分数。</p><p>例如，中位数是一个分位数，其中 50％ 的数据低于该点，而 50％ 的数据位于该点之上。Q-Q图的目的是找出两组数据是否来自同一分布。Q-Q图上绘制了 45 度角；如果两个数据集来自同一分布，则这些点将落在该参考线上。</p><p><strong>Q-Q图的 2 个作用：</strong></p><ol><li>数据集和正态分布做对比，观察数据是否符合正态分布；</li><li>两个数据集对比，观察两个数据集是否分布一致。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1602828171528-44c4652b-bf4d-400d-a13d-bf6cc70ac115.png#align=left&display=inline&height=411&margin=%5Bobject%20Object%5D&name=image.png&originHeight=411&originWidth=476&size=15252&status=done&style=none&width=476" alt="image.png"></p><p><strong>举例：</strong>7.19、6.31、5.89、4.5、3.77、4.25、5.19、5.79、6.79。以上值是否来自正态分布？<br><strong>解法：</strong></p><ol><li>从最小到最大排序。3.77、4.25、4.50、5.19、5.89、5.79、6.31、6.79、7.19</li><li>绘制正态分布曲线。将曲线分成n + 1个段。我们有 9 个值，因此将曲线分为 10 个大小相等的区域。对于此示例，每个线段占面积的 10％（因为100％/ 10 = 10％）。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1602828580368-fc61d994-2506-4625-8ccf-adbbcd5ec8e4.png#align=left&display=inline&height=237&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=346&size=33433&status=done&style=none&width=346" alt="image.png"></p><ol start="3"><li>在第 3 步中找到每个分段的 z 值（截止点）。这些分段是 _area_，因此请参考 z 表（标准正态概率）以获取每个分段的 z 值。在 z 值是：</li></ol><table><thead><tr><th align="center"><strong>分位</strong></th><th align="center"><strong>z值</strong></th></tr></thead><tbody><tr><td align="center">10％</td><td align="center">-1.28</td></tr><tr><td align="center">20％</td><td align="center">-0.84</td></tr><tr><td align="center">30%</td><td align="center">-0.52</td></tr><tr><td align="center">40%</td><td align="center">-0.25</td></tr><tr><td align="center">50%</td><td align="center">0</td></tr><tr><td align="center">60%</td><td align="center">0.25</td></tr><tr><td align="center">70%</td><td align="center">0.52</td></tr><tr><td align="center">80%</td><td align="center">0.84</td></tr><tr><td align="center">90%</td><td align="center">1.28</td></tr><tr><td align="center">100%</td><td align="center">3.0</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1602828613856-7b202d41-eea6-42a5-8e4a-39d23f248976.png#align=left&display=inline&height=237&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=346&size=31881&status=done&style=none&width=346" alt="image.png"></p><ol start="4"><li>针对正态分布截止点（步骤 3 ）绘制数据集值（步骤 1 ）。绘制表格：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1602828641949-822e7917-2ca4-4053-9d3d-fdd9ee32661a.png#align=left&display=inline&height=338&margin=%5Bobject%20Object%5D&name=image.png&originHeight=338&originWidth=523&size=14051&status=done&style=none&width=523" alt="image.png"></p><p>Q-Q图上的（几乎）直线表示数据符合正态分布。</p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>使用直方图来观察数据集符合正态分布相对容易理解，只需要观察数据集是否是正态分布的钟型形状，两头低，中间高。越标准与正态分布越吻合。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到小费数据集</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&#x27;tips&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据介绍： total_bill列为消费总金额；tip列为小费金额；sex列为顾客性别；smoker列为顾客是否抽烟；day列为消费的星期；time列为聚餐的时间段；size列为聚餐人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前5行数据</span></span><br><span class="line">tips.head()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1603089692569-f433353b-da04-448e-9a7a-02375525144b.png#align=left&display=inline&height=159&margin=%5Bobject%20Object%5D&name=image.png&originHeight=159&originWidth=343&size=14989&status=done&style=none&width=343" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">ax=plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.distplot(tips[<span class="string">&#x27;total_bill&#x27;</span>],fit=stats.norm)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q-Q图</span></span><br><span class="line">ax=plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">res = stats.probplot(tips[<span class="string">&#x27;total_bill&#x27;</span>], plot=plt)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/613759/1603089713759-95b2cf22-990e-4797-87e4-0f3ec6cc3c2e.png#align=left&display=inline&height=334&margin=%5Bobject%20Object%5D&name=image.png&originHeight=334&originWidth=602&size=33091&status=done&style=none&width=602" alt="image.png"></p><p>观察可以得出，total_bill数据集大概是符合正态分布的。</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://www.statisticshowto.com/q-q-plots/"><em>https://www.statisticshowto.com/q-q-plots/</em></a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;说明判断数据正态分布的 2 个方法，当然也不止 2 种，只是比较常用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
